from snakemake.utils import Paramspace
import pandas as pd

configfile: "config.yaml"

#shell.prefix("source /.bashrc; ")

######################
#  General Parameters

PWD=os.environ.get("PWD")
REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT+"/bioinfotree/task/"


#####################
#  Conda Parameters

CONDA_ROOT="/opt/conda"
CONDA_VERSION="miniconda3"
CONDA_ACTIVATE="set +u; source "+CONDA_ROOT+"/"+CONDA_VERSION+"/etc/profile.d/conda.sh; conda activate ; conda activate "
#CONDA_ACTIVATE="set +u; source %s/miniconda3/etc/profile.d/conda.sh ; conda activate ; conda activate" % REFERENCE_ROOT


#####################
#  Gencode Parameters

#GENCODE_SPECIES="hsapiens"
#GENCODE_VERSION="32"
GENCODE_SPECIES=config["GENCODE_SPECIES"]
GENCODE_VERSION=config["GENCODE_VERSION"]
GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"gencode/dataset/"+GENCODE_SPECIES+"/"+GENCODE_VERSION
CCRE_DIR=BIOINFO_REFERENCE_ROOT+"encode-screen/dataset/v13/"
GENOME_ASSEMBLY=config["GENOME_ASSEMBLY"]
GENOME_ASSEMBLY_DIR=GENCODE_DIR+"/"+GENOME_ASSEMBLY


######################
#  Docker Parameters

#DOCKER_GROUP=os.environ.get("DOCKER_GROUP")
DOCKER_GROUP="10001"
DOCKER_DATA_DIR=os.environ.get("DOCKER_DATA_DIR")
SCRATCH=os.environ.get("SCRATCH")


######################
#  Triplexator Parameters

#TRIPLEXATOR_PARAM=os.environ.get("TRIPLEXATOR_PARAM",None)
#if TRIPLEXATOR_PARAM is None:
#	TRIPLEXATOR_PARAM="-L -1 -e 20 -E -1 -l {}".format(config["TRIPLEXATOR_MIN_LEN"])

#triplexator_paramspace = None
#if os.path.exists('triplexator_params.tsv'):
#	triplexator_paramspace = Paramspace(pd.read_csv("triplexator_params.tsv", sep="\t"))

triplexator_paramspace = Paramspace(pd.read_csv("triplexator_params.tsv", sep="\t"))


#######################
# Other Parameters

#PREDICTORS_COL_NAMES=os.environ.get("PREDICTORS_COL_NAMES",config["PREDICTORS_COL_NAMES"])


# More parameters are specified in config.yaml

##############################################################
#
#	END OF PARAMETERS SPECIFICATION
#
##############################################################

include: "config.sk"

#container: "../../local/share/images/bit.wip-rnaseq.0.8.sif"

#####################
#  Generic rules

rule header_added:
	input:
		"{file}"
	output:
		"{file}.header_added"
	shell:"""
		(bawk -M {input} | cut -f 2 | transpose; cat {input} ) > {output}
	"""

rule header_added_gz:
	input:
		"{file}.gz"
	output:
		"{file}.header_added.gz"
	shell:"""
		(bawk -M {input} | cut -f 2 | transpose; cat {input} ) | gzip > {output}
	"""


#####################
#  Rules

rule get_fasta:
	input:  
		"longest_transcripts.fa"
	output: 
		"{GeneID,[\w\.-]+}.fa"
	group: "input_fasta_preparation_and_triplexator"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	threads: 1
	shell: """
		#{CONDA_ACTIVATE} bit_rnaseq_3.1;
		get_fasta -i {wildcards.GeneID} < {input} > {output}
	"""

rule get_fasta_ingore_condition:
	input:  
		"longest_transcripts.fa"
	output: 
		"{GeneID,[\w\.-]+}@{condition}.fa"
	group: "input_fasta_preparation_and_triplexator"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	threads: 1
	shell: """
		#{CONDA_ACTIVATE} bit_rnaseq_3.1;
		get_fasta -i {wildcards.GeneID} < {input} > {output}
	"""

ruleorder: get_fasta_ingore_condition > cCRE_fasta

rule cCRE_fasta:
	input:
		assembly=GENOME_ASSEMBLY_DIR+".primary_assembly.genome.clean_id.fa",
		cCRE_bed="{path}.bed"
	output:
		"{path}.bed.fa"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell:"""
		bedtools getfasta -name -fi {input.assembly} -bed {input.cCRE_bed} -fo {output}
	"""

ruleorder: cCRE_fasta > get_fasta

rule get_longest_transcripts:
	input:
		GENCODE_DIR+"/transcripts.fa.gz"
	output:
		"longest_transcripts.fa"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell:"""
		#{CONDA_ACTIVATE} bit_rnaseq_3.1; \
		hostname
		zcat {input} | fasta2oneline | tr "|" "\t" | bawk '$8!="retained_intron"' | find_best 6 7 | cut -f 6,10 | tab2fasta | fold > {output}
	"""


ruleorder: fasta_shuffle > get_fasta

rule fasta_shuffle:
	input:  
		"{GeneID}.fa"
	output: 
		"{GeneID}_shuffle.fa"
#	group: "input_fasta_preparation_and_triplexator"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		{CONDA_ACTIVATE} /home/imoliner/.conda/envs/meme; \
		fasta-shuffle-letters -kmer {config[FASTA_SHUFFLE_K]} {input} > {output}
	"""



#############################
#  Triplex scoring methods  #
#############################

# this rules make sense only in v8
rule all_tpx_paramspace:
	input:
#		expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.summary.gz",
#		expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.summary.neg_pos.gz",
#		expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.AUC", 
#		expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.Score_best.gz", 
		expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.gz",
			params = triplexator_paramspace.instance_patterns,
			ssRNA = all_selected_ssRNA_id(),
			single_strandedness_cutoff = config["SINGLE_STRANDEDNESS_CUTOFF"],
			window=config["RNAPLFOLD_WINDOW"]
		)

#rule ROC_wilcox_pvalue:
#	input:
#		expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.AUC", 
#			params = triplexator_paramspace.instance_patterns,
#			ssRNA = all_selected_ssRNA_id(),
#			single_strandedness_cutoff = config["SINGLE_STRANDEDNESS_CUTOFF"],
#			window=config["RNAPLFOLD_WINDOW"]
#		)
#	output:
#		"tpx_paramspace_AUC.gz"
#	shell: """	
#		matrix_reduce -t 'tpx_paramspace/*_ss*_unpairedWindow/*.neg_pos_rand.bed/min_length~*/max_length~*/error_rate~*/guanine_rate~*/filter_repeat~*/consecutive_errors~*/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.AUC' | tr ";" "\t" | pvalue_correct -a -c 12 | gzip > {output}
#	"""

rule triplexator_param_exploration:
	input:
			ssRNA_file="{ssRNA}_ss{single_strandedness_cutoff}_{window}.fasta",
			dsDNA_file="{dsDNA}.bed.fa"
	params:
		params_instance=triplexator_paramspace.instance
	output:
		tpx     = temp("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{dsDNA}.bed/"+f"{triplexator_paramspace.wildcard_pattern}/raw.tpx"),
		summary = temp("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{dsDNA}.bed/"+f"{triplexator_paramspace.wildcard_pattern}/raw.tpx.summary")
	wildcard_constraints:
		single_strandedness_cutoff      = "\d+",
		window                          = "\w+",
		ssRNA                           = "[^/]+",
		dsDNA                           = "[^/]+"
	container:
		"/home/reference_data/singularity_images/triplexator_v1.3.2.img"
	threads: 24
#	group: "input_fasta_preparation_and_triplexator"
	shell: """
			mkdir -p $(dirname {output.tpx}); cd $(dirname {output.tpx});\
			triplexator \
					-l  {wildcards.min_length} \
					-L  {wildcards.max_length} \
					-e  {wildcards.error_rate} \
					-g  {wildcards.guanine_rate} \
					-fr {wildcards.filter_repeat} \
					-c  {wildcards.consecutive_errors} \
					-fm 0 -of {config[TRIPLEXATOR_ALN]} \
					-rm 2 -p {threads} \
					-ss {PWD}/{input.ssRNA_file} -ds {PWD}/{input.dsDNA_file} -o raw.tpx
			echo triplexator retstatus: $?
	"""

# cat {output}.tmp | /hpcnfs/data/epi/ref/miniconda3/envs/scipy/bin/python3.10 ../../local/src/tpx_thermal_stability.py | gzip > {output}
rule triplexator_stability:
	input:
		"{path}.tpx"
	output:
		"{path}.tpx.stability.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
#	threads: 1
#	group: "input_fasta_preparation_and_triplexator"
	shell: """
		unhead {input} -f {input}.head | perl -pe '$_=">$_" if ($.-1)%6==0' | perl -ne 'chomp; print "$_\\t"' | tr ">" "\\n" | unhead > {output}.tmp
		cat {output}.tmp | python3 ../../local/src/tpx_thermal_stability.py | gzip > {output}
		rm {input}.head {output}.tmp
	"""

rule gzip_tpx_summary:
	input:
		"{file_path}/raw.tpx.summary"
	output:
		"{file_path}/raw.tpx.summary.gz"
#	group: "input_fasta_preparation_and_triplexator"
	shell:"""
		gzip < {input} > {output};
	"""

rule summary_neg_pos:
	input:
		summary="tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{dsDNA}.bed/{triplexator_params}/raw.tpx.summary.gz",
#		summary="{path1}/cCRE-{dsDNA}.bed/{path2}/raw.tpx.summary.gz",
		neg_pos_bed="{dsDNA}.bed"
#		neg_pos_bed="cCRE-{dsDNA}.bed"
	output:
		"tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{dsDNA}.bed/{triplexator_params}/raw.tpx.summary.neg_pos.gz"
#		"{path1}/cCRE-{dsDNA}.bed/{path2}/raw.tpx.summary.neg_pos.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		translate -a -r -v -e 0 <(zcat {input.summary} | sort | uniq) 4 < {input.neg_pos_bed} |  \
		bawk 'BEGIN{{print "Duplex_ID","neg_pos","t_pot","t_pot_norm","Duplex_length"}} {{print $4,$6,$8,$9,$3-$2}}' | gzip > {output}
	"""

# | /hpcnfs/data/epi/ref/miniconda3/envs/scipy/bin/python3.10 ../../local/src/tiplexator_t_pot_norm.py -l {wildcards.min_length} -L {wildcards.max_length} | gzip > {output}
rule custom_summary:
	input:
		tpx="tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{path1}/min_length~{min_length}/max_length~{max_length}/{path2}/raw.tpx.stability.gz",
		summary_neg_pos="tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{path1}/min_length~{min_length}/max_length~{max_length}/{path2}/raw.tpx.summary.neg_pos.gz",
		ssRNA_file="{ssRNA}_ss{single_strandedness_cutoff}_{window}.fasta"
	output:
		"tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{path1}/min_length~{min_length}/max_length~{max_length}/{path2}/raw.tpx.custom_summary.neg_pos.gz"
	wildcard_constraints:
		ssRNA="[^/]+",
		min_length="\d+",
		max_length="-*\d+"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
			zcat {input.summary_neg_pos} \
			| translate -a -v -e 0 -z <(zcat {input.tpx} | unhead | cut -f 4 | symbol_count) 1 \
			| append_each_row "$(unhead {input.ssRNA_file} | tr -d "N\\n" | wc -c)"  | unhead \
			| python3 ../../local/src/tiplexator_t_pot_norm.py -l {wildcards.min_length} -L {wildcards.max_length} | gzip > {output}
		"""

rule summary_covered_by_tts:
	input:
		tpx="{path}/raw.tpx.stability.gz",
		summary="{path}/raw.tpx.custom_summary.neg_pos.gz"
	output:
		"{path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		zcat {input.summary} \
			| translate -a -r -v -e 0 \
				<(bawk '{{print $4,$5,$6}}' {input.tpx} | unhead \
				| bedtools sort | bedtools merge | bawk '{{print $1,$3-$2}}' \
				| stat_base -g -t \
				| bawk 'BEGIN{{print "Duplex_ID","TTS_covered_len"}} {{print $1,$2}}' \
					) 1 \
			| bawk 'NR==1 {{print $0,"TTS_covered_frac"}} NR>1 {{ print $0,$10/$6}}' | gzip > {output}
		"""

rule tpx_stabilty_generic:
	input:
		"{file_path}.tpx.gz"
	output:
		"{file_path}.tpx.stability.gz"
	shell:"""
		zcat {input} | unhead | ../../local/src/tpx_thermal_stability.py > {output}
	"""

rule stability_best:
	input:
		"{file_path}/raw.tpx.stability.gz"
	output:
		"{file_path}/raw.best.tpx.stability.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		zcat {input} | find_best 4 14 | gzip > {output}
	"""

rule stability_tot_overcount:
	input:
		"{file_path}/raw.tpx.stability.gz"
	output:
		"{file_path}/raw.tpx.stability.tot_overcount.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		zcat {input} | cut -f 4,14 | bsort | stat_base -g -t \
		| bawk 'BEGIN{{print "Duplex_ID","Stability_tot_overcount"}} {{print}}' | gzip > {output}
	"""

rule stability_best_summarize:
	input:
		"{file_path}/raw.best.tpx.stability.gz"
	output:
		"{file_path}/raw.tpx.stability.best.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		bawk 'BEGIN{{print "Duplex_ID","Stability_best"}} {{print $Duplex_ID,$Stability}}' {input} | gzip > {output}
	"""

rule score_best_summarize:
	input:
		"{file_path}/raw.tpx.stability.gz"
	output:
		"{file_path}/raw.tpx.Score_best.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		bawk 'BEGIN{{print "Duplex_ID","Score_best"}} {{print $Duplex_ID,$Score}}' {input} | find_best -H 1 2| gzip > {output}
	"""

rule stability_tot_undercount:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		"{file_path}.tpx.stability.tot_undercount.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		bawk '{{print $Duplex_ID,$TTS_start,$TTS_end,$Stability}}' {input} | bedtools sort | bedtools merge -c 4 -o max | cut -f 1,4 | bsort | stat_base -g -t \
		| bawk 'BEGIN{{print "Duplex_ID","Stability_tot_undercount"}} {{print}}' | gzip > {output}
	"""

rule summary_covered_by_tts_stability:
	input:
		score_best		 = "{file_path}/raw.tpx.Score_best.gz",
		summary			 = "{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.gz",
		stability_best           = "{file_path}/raw.tpx.stability.best.gz",
		stability_tot_overcount  = "{file_path}/raw.tpx.stability.tot_overcount.gz",
		stability_tot_undercount = "{file_path}/raw.tpx.stability.tot_undercount.gz"
	output:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		zcat {input.summary} \
		| translate -a -r -v -e 0 <(bawk '{{print $Duplex_ID,$Stability_best}}' {input.stability_best}) 1 \
		| translate -a -r -v -e 0 <(zcat {input.stability_tot_overcount}) 1 \
		| translate -a -r -v -e 0 <(zcat {input.stability_tot_undercount}) 1 \
		| translate -a -r -v -e 0 <(zcat {input.score_best}) 1 > {output}.tmp
		bawk 'NR==1 {{print $0,"Stability_norm_overcount","Stability_norm_undercount" }} NR>1 {{print $0,$Stability_tot_overcount/$Duplex_length, $Stability_tot_undercount/$Duplex_length}}' {output}.tmp | gzip > {output}
		rm {output}.tmp
	"""

rule stability_norm_undercount:
	input:
		stability_tot_undercount = "{file_path}/raw.tpx.stability.tot_undercount",
		summary			 = "{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts"
	output:
		"{file_path}/raw.tpx.stability.norm_undercount"
	shell: """
		cat {input.summary} \
		| translate -a -r -v -e 0 {input.stability_tot_undercount} 1 \
		| unhead | bawk 'BEGIN{{print "Duplex_ID","Stability_norm_undercount"}} {{print $1,$12/$6}}' > {output}
	"""


rule duplex_length:
	input:
		"cCRE-{condition}.bed"
	output:
		"cCRE-{condition}.duplex_length"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell:"""
		bawk 'BEGIN{{print "Duplex_ID","Duplex_length"}} {{print $4,$3-$2}}' {input} > {output}
	"""


#rule stability_norm_undercount:
#	input:
#		duplex_length="cCRE-{condition}.duplex_length",
#		tot_undercount="{path1}/cCRE-{condition}.bed/{path2}/raw.tpx.stability.tot_undercount.gz"
#	output:
#		"{path1}/cCRE-{condition}.bed/{path2}/raw.tpx.stability.norm_undercount.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
#	shell:"""
#		bawk '{{print $Duplex_ID,$Stability_tot_undercount}}' {input.tot_undercount} \
#		| translate -a -r {input.duplex_length} 1 \
#		| bawk 'NR>1{{print $1,$2/$3}}' \
#		| enumerate_rows -n -r \
#		| bawk 'BEGIN{{print "Duplex_ID","Stability_norm_undercount"}} NR>1 {{printf("%s\\t%.2f\\n", $1,$3)}}' | gzip > {output}
#	"""



rule summary_covered_by_tts_stability_logistic_full:
	input:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.gz"
	output:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.logistic_full.gz"
	#container:
	#	"../../local/share/images/bmodel_v0.1.sif"
	shell: """
		{CONDA_ACTIVATE} bmodel_env; \	
		../../local/src/bmodel -c -s -d -n {input} "neg_pos~Stability_best+Stability_norm_undercount" | gzip > {output}
	"""

rule summary_covered_by_tts_stability_logistic:
	input:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.logistic_full.gz"
	output:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.logistic.gz"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		fasta2tab <(zcat {input}) \
		| perl -wlane 'BEGIN{{$,="\t"; $neg=0}} \
			if($neg==1 || ($F[0] eq "coefficients" && $F[1] ne "(Intercept)" && $F[2]<0)){{$neg=1;}} \
			if($F[0] eq "data_and_prob"){{\
				 if($F[17] ne "PROB__fitted_model" and $neg){{$F[17]=0}}\
			 shift(@F); print @F}}' | gzip > {output}
	"""


rule compute_AUC_and_Wilcoxon:
	input:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.gz"
	output:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.auc_and_wilcoxon"
	script:
		"../../local/src/auc_and_wilcoxon.R"

rule compute_AUC_comparison:
	input:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.gz"
	output:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.AUC_comp.gz"
	shell: """
		mkdir -p `dirname logs/{output}`
		{CONDA_ACTIVATE} pROC_Env; \
		(zcat {input} \
		| ../../local/src/ROC.R {config[OUTCOMES_COL_NAME]} {config[PREDICTORS_COL_NAMES]} -d "<" -O '{wildcards.file_path}/auc_comparison_plot' | gzip > {output}) &> logs/{output}.log
	"""

rule compute_AUC_no_comp:
	input:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.gz"
	output:
		"{file_path}/raw.tpx.custom_summary.neg_pos.covered_by_tts.stability.AUC"
	container: None
	shell: """
		# {CONDA_ACTIVATE} bmodel_env;
		zcat {input} \
		| ../../local/src/ROC_no_comp.R {config[OUTCOMES_COL_NAME]} {config[PREDICTORS_COL_NAMES]} > {output}
	"""



##################
#  2D structure 

rule RNAplfold_lunp:
	input:
		"{ssRNA}.fa"
	output:
		lunp="RNAplfold/{ssRNA}_lunp",
		basepairs="RNAplfold/{ssRNA}_basepairs"
#	container:
#		"../../local/share/images/viennarna.2.5.0.simg"
	shell: """
		{CONDA_ACTIVATE} rnaFoldRand_v0.1;\
		mkdir -p RNAplfold;\
		RNAplfold -W {config[RNAPLFOLD_WINDOW_SIZE]} -L {config[RNAPLFOLD_SPAN_SIZE]} -u {config[RNAPLFOLD_UNPAIRED_WINDOW]} -o < {input}; \
		mv {wildcards.ssRNA}_lunp {output.lunp}; mv {wildcards.ssRNA}_basepairs {output.basepairs}
	"""

# Unpaired window
# /hpcnfs/data/epi/ref/miniconda3/envs/scipy/bin/python3.10
#{CONDA_ACTIVATE} pybigwig;
rule RNAplfold_lunp_unpairedWindow_modif_zscore:
	input:
		"RNAplfold/{ssRNA}_lunp"
	output:
		"RNAplfold/{ssRNA}_lunp.unpairedWindow.modif_zscore"
	#container:
	#	"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell:"""
		{CONDA_ACTIVATE} rnaFoldRand_v0.1;\
		grep -v '#' {input} | bawk '{{print $(NF)}}' | python3 ../../local/src/distMedian.py > {output}
	"""


# set the shift for bed file positions
WINDOW_CENTER=config["RNAPLFOLD_UNPAIRED_WINDOW"] / 2
if(config["RNAPLFOLD_UNPAIRED_WINDOW"] % 2 != 0):
	WINDOW_CENTER=config["RNAPLFOLD_UNPAIRED_WINDOW"] / 2 + 0.5

ruleorder: mask_fasta_unpairedWindow_shortcut > mask_fasta_unpairedWindow

rule mask_fasta_unpairedWindow_shortcut:
	input:
		"{ssRNA}.fa"
	output:
		"{ssRNA}_ss0_unpairedWindow.fasta"
	threads: 1
	group: "input_fasta_preparation_and_triplexator"
	shell: """
		ln -sf {input} {output}
	"""

rule mask_fasta_unpairedWindow:
	input:
		RNAplfold_prob="RNAplfold/{ssRNA}_lunp.unpairedWindow.modif_zscore",
		fasta="{ssRNA}.fa"
	output:
		"{ssRNA}_ss{percentile}_unpairedWindow.fasta"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell:"""
		PERC=$(sort -n {input.RNAplfold_prob} | awk '{{all[NR] = $0}} END{{print all[int(NR*{wildcards.percentile}/100 - 0.5)]}}');\
		fasta_mask <(bawk -v perc=$PERC '$1<perc {{print "{wildcards.ssRNA}",NR - 1 + {WINDOW_CENTER}, NR + {WINDOW_CENTER}}}' {input.RNAplfold_prob} | bedtools merge) < {input.fasta} > {output}
	"""


# Single nt base pairing probability
#/hpcnfs/data/epi/ref/miniconda3/envs/scipy/bin/python3.10
#{CONDA_ACTIVATE} pybigwig;
rule RNAplfold_lunp_singleNt_modif_zscore:
	input:
		"RNAplfold/{ssRNA}_lunp"
	output:
		"RNAplfold/{ssRNA}_lunp.singleNt.modif_zscore"
	#container:
	#	"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell: """
		{CONDA_ACTIVATE} rnaFoldRand_v0.1;\
		grep -v '#' {input} | bawk '{{print $2}}' | python3 ../../local/src/distMedian.py > {output}
	"""


# no shift for bed file
rule mask_fasta_singleNt:
	input:
		RNAplfold_prob="RNAplfold/{ssRNA}_lunp.singleNt.modif_zscore",
		fasta="{ssRNA}.fa"
	output:
		"{ssRNA}_ss{percentile}_singleNt.fasta"
#	container:
#		"../../local/share/images/bit.wip-rnaseq.0.8.sif"
	shell:"""
		PERC=$(sort -n {input.RNAplfold_prob} | awk '{{all[NR] = $0}} END{{print all[int(NR*{wildcards.percentile}/100 - 0.5)]}}'); \
		fasta_mask <(bawk -v perc=$PERC '$1<perc {{print "{wildcards.ssRNA}",NR - 1, NR}}' {input.RNAplfold_prob} | bedtools merge) < {input.fasta} > {output}
	"""

#rule RNAplfold_lunp_singleNt:
#	input:
#		"RNAplfold/{ssRNA}_lunp"
#	output:
#		"RNAplfold/{ssRNA}_lunp.singleNt"
#	shell:"""
#		grep -v '#' {input} | bawk '{{print $1}}' > {output}
#	"""

#rule triplexator_filter:
#	input:
#		"{path}.tpx.raw"
#	output:
#		"{path}.tpx"
#	shell: """
#		bawk '$Score>={config[TRIPLEXATOR_SCORE_CUTOFF]}' {input} > {output}
#	"""


#rule gzip_precompgzsummary="{file_name}.tpx.summary"
#	output:
#		tpx="precomputed_tpx/{file_name}.tpx.gz",
#		summary="precomputed_tpx/{file_name}.tpx.summary.gz"
#	shell:"""
#		mkdir -p precomputed_tpx;
#		gzip < {input.tpx} > {output.tpx};
#		gzip < {input.summary} > {output.summary};
#		rm {input.tpx} {input.summary}
#	"""


#rule link_tpx:
#	input:
#		"precomputed_tpx/{ssRNA}-cCRE.bed.tpx.gz"
#	output:
#		"tpx_analysis/{ssRNA}/cCRE.tpx.gz"
#	shell: """
#		mkdir -p tpx_analysis/{wildcards.ssRNA};
#		cd tpx_analysis/{wildcards.ssRNA};
#		ln -s ../../{input} cCRE.tpx.gz
#	"""

	
#rule tpx_stability_tfo_profile:
#	input:
#		"tpx_analysis/{ssRNA}/cCRE.tpx.stability.gz"
#	output:
#		"tpx_analysis/{ssRNA}/cCRE.tpx.stability.cut_{stability_cutoff}.tfo_profile"
#	shell:"""	
#		bawk '$Stability>={wildcards.stability_cutoff} {{print $Duplex_ID,$Stability,$1,$2,$3,$4}}' {input} | find_best 1 2 | cut -f 3- | bedtools sort | bedtools merge -c 4 -o count_distinct > {output}
#	"""
#
#
#rule longTarget_best_score_complete:
#	input:
#		cCRE_bed="cCRE.bed",
#		tpx_best="tpx_analysis/{ssRNA}/cCRE.tpx.best.gz"
#	output:
#		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.gz"
#	shell:"""
#		{CONDA_ACTIVATE} bit_rnaseq_2.8;
#		zcat {input.tpx_best} | tab2matrix -e 0 -C <(cut -f 4 {input.cCRE_bed}) | matrix2tab | gzip > {output}
#	""" 
#
#rule dsDNA_scored_neg_pos:
#	input:
#		cCRE_bed="cCRE-{condition}.neg_pos.bed",
#		dsDNA_scored="{path1}/cCRE-ALLcond.bed/{path2}/raw.tpx.{summarize}.gz"
#	output:
#		"{path1}/cCRE-ALLcond.bed/{path2}/raw.tpx.{summarize}.{condition}.neg_pos.gz"
#	shell:"""
#		cut -f 4- {input.cCRE_bed} | translate -a -v -e 0 <(zcat {input.dsDNA_scored}) 1 | gzip > {output}
#	"""


###########################################################
# TPXcCRE related

rule fisher_select_cutoff:
	input:
		"{path}/raw.tpx.{summarize}.{condition}.neg_pos.gz"
	output:
		"{path}/raw.tpx.{summarize}.{condition}.neg_pos.fisher_select_cutoff.gz"
	shell:"""
		bawk '{{print $3,$2,$4}}' {input} | fisher_select_cutoff | gzip > {output}
	"""
#For stability.tot_undercount
#bawk '{{$2=sprintf("%d",$2); print $3,$2,$4}}' {input} | fisher_select_cutoff > {output}

rule fisher_best_cutoff:
	input:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff.best.gz"
	shell:"""
		zcat {input} | find_best -r 1 9 | gzip > {output}
	"""

rule fisher_best_cutoff_cut:
	input:
		neg_pos="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.gz",
		cutoff="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff.best.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.best_cut.gz"
	shell:"""
		bawk -v C=$(bawk '{{print $3}}' {input.cutoff}) '$3>=C' {input.neg_pos} | gzip > {output}
	"""

	#	cutoff="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff.best"
#rule tpx_stability_best_cutoff:
#	input:
#		tpx_stability="tpx_analysis/{ssRNA}/cCRE.tpx.best.gz"
#	output:
#		"tpx_analysis/{ssRNA}/cCRE.tpx.best.cutoff_{}.gz"
#	shell:"""
#		ciao
#	"""

#rule:
#	input:
#		tpx="tpx_analysis/{ssRNA}/{target_regions}.tpx.gz",
#		bed="{target_regions}.bed"
#	output:
#		"tpx_analysis/{ssRNA}/{target_regions}.tpx.tts_genom_coords.pre"
#	shell:"""
#		{CONDA_ACTIVATE} bit_rnaseq_2.8;
#		zcat {input.tpx} | unhead | translate -r -a -f 4 <(cut -f -4 {input.bed}) 4 > {output}
#	"""
#rule:
#	input:
#		"{file}.tpx.tts_genom_coords.pre"	
#	output:
#		"{file}.tpx.tts_genom_coords"
#	shell:"""
#		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
#		bawk '{{TTS_start_genom=$TTS_start+$region_b; TTS_end_genom=$TTS_end+$region_b; print $0,TTS_start_genom,TTS_end_genom}}' {input} > {output}
#	"""
#rule:
#	input:
#		"{file}.tpx.tts_genom_coords"	
#	output:
#		"{file}.tpx.tts_genom_coords.bed"
#	shell:"""
#		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
#		bawk '{{print $region_chr,$TTS_start_genom,$TTS_end_genom, $sequence_id "-" $Duplex_ID, $Score,$Strand,$sequence_id,$TFO_start,$TFO_end,$Error_rate,$Errors,$Motif,$Orientation,$Guanine_rate,$Duplex_ID,$region_b,$region_e}}' {input}\
#		| id2count -a 4  > {output}
#	"""
#rule assoc_genehancer:
#	input:
#		tpx="{file}.tpx.tts_genom_coords.bed",
#		genehancer="/sto1/ref/bioinfotree/task/GeneHancer/dataset/v5/genehancer.connected_genes.signif.clean_ensg.entrez.rr_coords.tissue.bed"
#	output:
#		"{file}.tpx.tts_genom_coords.assoc_genes"
#	shell:"""
#		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
#		bedtools intersect -loj -a {input.tpx} -b {input.genehancer}\
#		| bawk '{{print $7,$15,$22,$23,$24, $5}}' > {output}
#	"""

"""

.META: *.tpx.gz
	1       ssRNA
	2       TFO_start
	3       TFO_end
	4       Duplex_ID
	5       TTS_start
	6       TTS_end
	7       Score
	8       Error_rate
	9       Errors
	10      Motif
	11      Strand
	12      Orientation
	13      Guanine_rate

.META: *.tpx.stability.gz *.tpx.stability
	1	ssRNA
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability

.META: raw.tpx.stability.best.gz
	1	Duplex_ID
	2	Stability_best

.META: *.tpx.tts_genom_coords.assoc_genes
	1	ssRNA
	2	cCRE
	2	genehancer_region
	3	gene
	4	EntrezGene
	4	tpx_score	

.META: *raw.tpx.stability.tts_genome_coords.pre
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability
	15	tpx_seq_A
	16	tpx_seq_B
	17	tpx_seq_C
	18	tpx_seq_D
	19	region_chr
	20	region_b
	21	region_e

.META: *raw.tpx.stability.tts_genome_coords.gz
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability
	15	tpx_seq_A
	16	tpx_seq_B
	17	tpx_seq_C
	18	tpx_seq_D
	19	region_chr
	20	region_b
	21	region_e
	22	TTS_start_genome
	23	TTS_end_genome

.META: *raw.tpx.stability.tts_genome_coords.bed
	1	region_chr
	2	TTS_start_genome
	3	TTS_end_genome
	4	region_name
	5	sequence_id
	6	TFO_start
	7	TFO_end
	8	Duplex_ID
	9	TTS_start
	10	TTS_end
	11	Score
	12	Error_rate
	13	Errors
	14	Motif
	15	Strand
	16	Orientation
	17	Guanine_rate
	18	Stability
	19	tpx_seq_A
	20	tpx_seq_B
	21	tpx_seq_C
	22	tpx_seq_D

.META: *.fisher_select_cutoff
	1	ssRNA
	2	greater_and_positive
	3	lower_and_positive
	4	greater_and_negative
	5	lower_and_negative
	6	oddsratio
	7	pvalue

.META: cCRE.tpx.best.complete.*-neg_pos.gz
	1	ssRNA	HOTTIP
	2	region	merged_ChIRP_1
	3	score	0
	4	condition	HOTTIP
	5	neg_pos	pos

.META: cCRE.tpx.best.complete.*-neg_pos_rand.gz
	1	ssRNA	HOTTIP
	2	region	merged_ChIRP_1
	3	score	0
	4	condition	HOTTIP
	5	neg_pos	pos


"""


rule barplot_lncRNA_condition:
	input:
		#"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}_neg_pos.fisher_select_cutoff"
		"{file}.fisher_select_cutoff"
	output:
		# tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}_neg_pos.fisher_select_cutoff.barplot.pdf
		"{file}.fisher_select_cutoff.barplot.pdf"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		../../local/src/single_barplot.R < {input} > {output}
	"""


rule hack:
	output:
		"cCRE-{in_vitro_diff}-vs-{staminal}.matrix"
	shell: """
		touch {output}
	"""

rule cCRE_matrix:
	input:
		in_vitro_diff="%s/hg38-{in_vitro_diff}.signature_only.noCTCF.bed" % config['ENCODE_DIR'],
		staminal="%s/hg38-{staminal}.signature_only.noCTCF.bed" % config['ENCODE_DIR']
	output:
		"cCRE-{in_vitro_diff}-vs-{staminal}.matrix"
	shell: """
		matrix_reduce -t '{config[ENCODE_DIR]}/hg38-*.signature_only.noCTCF.bed' -l '{input}' | bawk '{{print $1,$2";"$3";"$4";"$5,$11}}' | tab2matrix -t -r "Region" -e 'Low-DNase' > {output}
	"""

#rule cCRE_bed:
#	input:
#		"{condition}_{staminal}-vs-{staminal}.matrix"
#	output:
#		"{condition}_{staminal}.bed"
#	shell:"""
#		cut -f 1 {input} | unhead | tr ";" "\t" > {output}
#	"""



#################################
#  TTS genomic coordinates bed

rule tts_genome_coords_pre:
       input:
               tpx="tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{dsDNA}.bed/{path}/raw.tpx.stability.gz",
               bed="{ssRNA}_onlypos.bed"
       output:
               temp("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{dsDNA}.bed/{path}/raw.tpx.stability.tts_genome_coords.pre")
       shell:"""
               #{CONDA_ACTIVATE} bit_rnaseq_2.8;
               zcat {input.tpx} | unhead | translate -r -k -a -f 4 <(cut -f -4 {input.bed}) 4 > {output}
       """

rule tts_genome_coords:
       input:
               "{file_path}.tts_genome_coords.pre"       
       output:
               "{file_path}.tts_genome_coords.gz"
       shell:"""
               #{CONDA_ACTIVATE} bit_rnaseq_2.8;
               bawk '{{TTS_start_genome=$TTS_start+$region_b; TTS_end_genome=$TTS_end+$region_b; print $0,TTS_start_genome,TTS_end_genome}}' {input} | gzip > {output}
       """

rule tts_genome_coords_bed:
       input:
               "{file}.tts_genome_coords.gz"   
       output:
               "{file}.tts_genome_coords.bed"
       shell:"""
               #{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bawk '$region_chr !~ /GL/ && $region_chr !~ /JH/ {{a = int($Stability*10*(834/430)); if(a>1000){{a = 1000}}; print $region_chr,$TTS_start_genome,$TTS_end_genome,$sequence_id,a}}' {input} | \
		bsort -k1,1 -k2,2n | bedtools merge -i - -c 4,5 -o distinct,max | id2count -a 4 > {output}
       """


rule tts_genome_coords_bedGraph:
       input:
               "{file}.tts_genome_coords.bed"   
       output:
               "{file}.tts_genome_coords.bedGraph"
       shell:"""
		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
		cut -f1-3,5 {input} > {output}
	"""	


rule tts_genome_coords_bigWig:
	input:
		bedGraph="{file}.tts_genome_coords.bedGraph",
		chrom_info=GENCODE_DIR + "/chrom.info"
	output:
		"{file}.tts_genome_coords.bw"
	shell:"""
		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bedGraphToBigWig {input.bedGraph} <(unhead {input.chrom_info}) {output}	
	"""	

rule tts_genome_coords_bigBed:
	input:
		bed="{file}.tts_genome_coords.bed",
		chrom_info=GENCODE_DIR + "/chrom.info"
	output:
		"{file}.tts_genome_coords.bb"
	shell:"""
		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bedToBigBed {input.bed} <(unhead {input.chrom_info}) {output}	
	"""



######################
#  Run triplexAligner

if config["GENCODE_SPECIES"] == "hsapiens":
	SPECIES = "hs"
elif config["GENCODE_SPECIES"] == "mmusculus":
	SPECIES = "mm"

rule all_triplexAligner:
	input:
		expand("triplexAligner/{ssRNA}/{ssRNA}.neg_pos_rand.bed/tpx.best_logE.gz",
			ssRNA = all_selected_ssRNA_id()
		)
	output:
		"triplexAligner/all_triplexAligner_done"
	shell: """
		touch {output}
	"""

rule run_triplexAligner:
	input:
		ssRNA="{ssRNA}.fa",
		dsDNA="{ssRNA}.neg_pos_rand.bed.fa"
	output:
		"triplexAligner/{ssRNA}/{ssRNA}.neg_pos_rand.bed/tpx.gz"
	shell: """
		mkdir -p `dirname {output}`;\
		docker run -u `id -u`:{DOCKER_GROUP} --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} triplex_aligner $PWD/{input.dsDNA} $PWD/{input.ssRNA} {SPECIES} | gzip > {output}
		#docker run -u `id -u`:{DOCKER_GROUP} --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} dae37bcaf0b3 $PWD/{input.dsDNA} $PWD/{input.ssRNA} {SPECIES} | gzip > {output}
"""

rule best_logE_triplexAligner:
	input:
		triplexAlign="triplexAligner/{ssRNA}/{ssRNA}.neg_pos_rand.bed/tpx.gz",
		neg_pos="{ssRNA}.neg_pos_rand.bed"
	output:
		"triplexAligner/{ssRNA}/{ssRNA}.neg_pos_rand.bed/tpx.best_logE.gz"
	shell: """
		cut -f4,6 {input.neg_pos} | \
		translate -a -v -e 0 -f 2 <(zcat {input.triplexAlign} | find_best --skip_header 12 10 | cut -f10,12 ) 1 | \
		bawk 'BEGIN{{print "peak","best_meanStab","neg_pos"}}{{print}}' | gzip > {output}
	"""

rule best_score_triplexAligner:
	input:
		triplexAlign="triplexAligner/{ssRNA}/{ssRNA}.neg_pos_rand.bed/tpx.gz",
		neg_pos="{ssRNA}.neg_pos_rand.bed"
	output:
		"triplexAligner/{ssRNA}/{ssRNA}.neg_pos_rand.bed/tpx.best_score.gz"
	shell: """
		cut -f4,6 {input.neg_pos} | \
		translate -a -v -e 0 -f 2 <(zcat {input.triplexAlign} | find_best --skip_header 12 7 | cut -f10,12 ) 1 | \
		bawk 'BEGIN{{print "peak","best_meanStab","neg_pos"}}{{print}}' | gzip > {output}
	"""

########################
#  Run fasim-LongTarget

rule all_fasimLongTarget:
	input:
		expand("fasim_LongTarget/{ssRNA}/{ssRNA}.fasim/{ssRNA}-{ssRNA}-fastSim-TFOsorted.best_meanStab.gz",
			ssRNA = all_selected_ssRNA_id()
		)
	output:
		"fasim_LongTarget/all_fasimLongTarget_done"
	shell: """
		touch {output}
	"""

rule fasim_fasta_format:
	input:
		bed="{ssRNA}.neg_pos_rand.bed",
		assembly=GENOME_ASSEMBLY_DIR+".primary_assembly.genome.clean_id.fa"
	output:
		"{ssRNA}.fasim.fa"
	shell: """
		 bawk '{{split($4,a,";"); print $1~3,a[2]"|"$4,$5,$6}}' {input.bed} | \
		 bedtools getfasta -name+ -fi {input.assembly} -bed - | \
		 sed -e 's/::/|/g' > {output}
	"""

ruleorder: fasim_fasta_format > get_fasta

rule run_fasimLongTarget:
	input:
		ssRNA="{ssRNA}.fa",
		dsDNA="{ssRNA}.fasim.fa"
	output:
		"fasim_LongTarget/{ssRNA}/{ssRNA}.fasim/{ssRNA}-{ssRNA}-fastSim-TFOsorted"
	shell: """
		mkdir -p `dirname {output}`;\
		docker run --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} fasim -f1 $PWD/{input.dsDNA} -f2 $PWD/{input.ssRNA} -O $PWD/`dirname {output}`
"""

rule best_fasimLongTarget:
	input:
		fasim="fasim_LongTarget/{ssRNA}/{ssRNA}.fasim/{ssRNA}-{ssRNA}-fastSim-TFOsorted",
		neg_pos="{ssRNA}.neg_pos_rand.bed"
	output:
		"fasim_LongTarget/{ssRNA}/{ssRNA}.fasim/{ssRNA}-{ssRNA}-fastSim-TFOsorted.best_meanStab.gz"
	shell: """
		cut -f4,6 {input.neg_pos} | \
		translate -a -v -e 0 <(cut -f6,9 {input.fasim} | find_best --skip_header 1 2) 1 | \
		bawk 'BEGIN{{print "peak","best_meanStab","neg_pos"}}{{print}}' | gzip > {output}
	"""


###########################################################
#  fasim-LongTarget / triplexAligner / 3plex - comparison

rule neg_pos_ALL_scores:
	input:
		triplexAlign="triplexAligner/all_triplexAligner_done",
		fasim="fasim_LongTarget/all_fasimLongTarget_done"
	output:
		"ROC/tpx.neg_pos.ALL_scores.gz"
	shell: """
		mkdir -p `dirname {output}`; \
		cat <(matrix_reduce -t '*/*/*/tpx.specific_score.gz') <(matrix_reduce -t '*/*/*/tpx.best_logE.gz') <(matrix_reduce -t '*/*/*/*-*-fastSim-TFOsorted.best_meanStab.gz') | \
		grep -v best_meanStab | grep -v Duplex_ID | \
		bawk '{{split($1,a,";"); print $2";"$4,a[1],$3}}' | \
		tab2matrix -r 'peak;ssRNA;neg_pos' | \
		bawk '{{split($1,a,";"); print a[2],a[1]";"a[2],a[3],$0}}' | cut -f1-3,5- | \
		gzip > {output}
	"""

rule ALL_scores_AUC_cmp:
	input:
		"ROC/tpx.neg_pos.ALL_scores.gz"
	output:
		table="ROC/tpx.neg_pos.ALL_scores.AUC_cmp.txt",
		pdf="ROC/ROC_comparison.pdf"
	shell: """
		{CONDA_ACTIVATE} pROC_Env;\
		zcat  {input} | \
		../../local/src/ROC.R neg_pos $(zcat {input} | head -n1 | cut -f4- | tr "\\t" " ") -d "<" -O {output.pdf} > {output.table}
	"""

from snakemake.utils import Paramspace
import pandas as pd


configfile: "config.yaml"

######################
#  General Parameters

NCPUS=os.environ.get("NCPUS",10)
PWD=os.environ.get("PWD")
REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT+"bioinfotree/task/"
CONDA_ACTIVATE="set +u; source %s/miniconda2/etc/profile.d/conda.sh ; conda activate ; conda activate" % REFERENCE_ROOT


#####################
#  Gencode Parameters

GENCODE_SPECIES="hsapiens"
GENCODE_VERSION="32"
GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"gencode/dataset/"+GENCODE_SPECIES+"/"+GENCODE_VERSION
CCRE_DIR=BIOINFO_REFERENCE_ROOT+"encode-screen/dataset/v13/"


######################
#  Docker Parameters

#DOCKER_GROUP=os.environ.get("DOCKER_GROUP")
DOCKER_GROUP="10001"
DOCKER_DATA_DIR=os.environ.get("DOCKER_DATA_DIR")
SCRATCH=os.environ.get("SCRATCH")


######################
#  Triplexator Parameters

TRIPLEXATOR_PARAM=os.environ.get("TRIPLEXATOR_PARAM",None)
if TRIPLEXATOR_PARAM is None:
	TRIPLEXATOR_PARAM="-L -1 -e 20 -E -1 -l {}".format(config["TRIPLEXATOR_MIN_LEN"])
# Other parameters are specified in config.yaml

triplexator_paramspace = Paramspace(pd.read_csv("triplexator_params.tsv", sep="\t"))

#####################
#  Rules

def all_selected_ssRNA_id():
	with open("selected_ssRNA_id", mode='rt') as fh:
		for line in fh:
			yield line.rstrip()

def get_all_triplexator_selected_input(wildcards):
	for GeneID in all_selected_ssRNA_id():
                yield "precomputed_tpx/{}-cCRE.bed.tpx.gz".format(GeneID)

rule all_triplexator:
	input:
		get_all_triplexator_selected_input


def get_all_fisher_selected_condition(wildcards):
	with open("selected_lncRNA.ALLconditions",mode='rt') as fh:
		for line in fh:
			ssRNA,diff,stem = line.rstrip().split("\t")
			yield "tpx_analysis/{}/cCRE.tpx.best.complete.{}_{}_neg_pos.fisher_select_cutoff".format(ssRNA,diff,stem)


rule all_fisher_selected_condition:
	input:
		get_all_fisher_selected_condition


def get_all_fisher(wildcards):
	with open("all_lncRNA.ALLconditions",mode='rt') as fh:
		for line in fh:
			ssRNA,diff,stem = line.rstrip().split("\t")
			yield "tpx_analysis/{}/cCRE.tpx.best.complete.{}_{}_neg_pos.fisher_select_cutoff".format(ssRNA,diff,stem)

def get_all_fisher_neg_pos_rand(wildcards):
	for ssRNA in all_selected_ssRNA_id():
		yield "tpx_analysis/{}/cCRE.tpx.best.complete.{}-neg_pos_rand.fisher_select_cutoff".format(ssRNA,ssRNA)

def get_all_fisher_neg_pos_nocCRE(wildcards):
	for ssRNA in all_selected_ssRNA_id():
		yield "tpx_analysis/{}/cCRE.tpx.best.complete.{}-neg_pos.fisher_select_cutoff".format(ssRNA,ssRNA)

rule all_fisher:
	input:
		get_all_fisher

rule all_fisher_neg_pos_rand:
	input:
		get_all_fisher_neg_pos_rand

rule all_fisher_neg_pos_nocCRE:
	input:
		get_all_fisher_neg_pos_nocCRE




rule cCRE_fasta:
	input:
		assembly=GENCODE_DIR+"/GRCh38.primary_assembly.genome.clean_id.fa",
		cCRE_bed="{path}.bed"
	output:
		"{path}.bed.fa"
#	priority: 100
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bedtools getfasta -name -fi {input.assembly} -bed {input.cCRE_bed} -fo {output}
	"""

rule get_fasta:
	input:  
		"longest_transcripts.fa"
	output: 
	#	temp("{GeneID,[\w\.-]+}.fa")
		"{GeneID,[\w\.-]+}.fa"
        #container:
        #        "../../local/share/images/bit.wip-rnaseq.0.4.img"
	threads: 1
	shell: """
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		get_fasta -i {wildcards.GeneID} < {input} > {output}
	"""

ruleorder: cCRE_fasta > get_fasta

rule get_longest_transcripts:
	input:
		GENCODE_DIR+"/gencode.v32.transcripts.fa.gz"
	output:
		"longest_transcripts.fa"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8; 
		zcat {input} | fasta2oneline | tr "|" "\t" | bawk '$8!="retained_intron"' | find_best 6 7 | cut -f 6,10 | tab2fasta | fold > {output}
	"""


rule cCRE_bed:
	input:
		CCRE_DIR+"GRCh38-ccREs.bed"
	output:
		"cCRE.bed"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bawk '$6=="PLS" || $6=="dELS" || $6=="pELS"' {input} > {output}
	"""


TRIPLEXATOR_ALN_2_ONE_LINE=""
if config["TRIPLEXATOR_ALN"]==1:
	TRIPLEXATOR_ALN_2_ONE_LINE=	"""unhead {output.tpx} -f {output.tpx}.head | perl -pe '$_=">$_" if ($.-1)%6==0' | perl -ne 'chomp; print "$_\\t"' | tr ">" "\\n" | unhead > {output.tpx}.tmp;""" + \
					"""mv {output.tpx}.head {output.tpx}; cat {output.tpx}.tmp >> {output.tpx}; rm {output.tpx}.tmp """


rule all_tpx_paramspace:
	input:
		expand("tpx_paramspace/TERC/TERC.neg_pos_rand.bed/{params}/raw.tpx.stability", params=triplexator_paramspace.instance_patterns)

rule triplexator_param_exploration:
	input:
		ssRNA_file="{ssRNA}.fa",
		dsDNA_file="{dsDNA}.fa"
	params:
		params_instance=triplexator_paramspace.instance
	output:
		tpx	="tpx_paramspace/{ssRNA}/{dsDNA}/"+f"{triplexator_paramspace.wildcard_pattern}/raw.tpx",
		summary ="tpx_paramspace/{ssRNA}/{dsDNA}/"+f"{triplexator_paramspace.wildcard_pattern}/raw.tpx.summary"
	shell: """
		docker run -u `id -u`:{DOCKER_GROUP} --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} triplexator:{config[TRIPLEXATOR_DOCKER]} bash -c "cd {PWD};
		mkdir -p $(dirname {output.tpx}); cd $(dirname {output.tpx});\
		triplexator \
			-l  {wildcards.min_length} \
			-L  {wildcards.max_length} \
			-e  {wildcards.error_rate} \
			-g  {wildcards.guanine_rate} \
			-fr {wildcards.filter_repeat} \
			-c  {wildcards.consecutive_errors} \
			-fm 0 -of {config[TRIPLEXATOR_ALN]} -o raw.tpx -rm 2 -p {NCPUS} -ss {PWD}/{input.ssRNA_file} -ds {PWD}/{input.dsDNA_file}"
		""" + \
		TRIPLEXATOR_ALN_2_ONE_LINE + \
		"""
	"""

rule summary_neg_pos:
	input:
		summary="tpx_paramspace/{ssRNA}/{dsDNA}.bed/{triplexator_params}/raw.tpx.summary",
		neg_pos_bed="{dsDNA}.bed"
	output:
		"tpx_paramspace/{ssRNA}/{dsDNA}.bed/{triplexator_params}/raw.tpx.summary.neg_pos"
	shell: """
		translate -a -k <(cut -f 4,6 {input.neg_pos_bed}) 1 < {input.summary} | bawk 'BEGIN{{print "Duplex_ID","neg_pos","t_pot"}} {{print $1,$2,$5}}' > {output}
	"""

rule custom_summary_pre:
	input:
		tpx="tpx_paramspace/{ssRNA}/{dsDNA}.bed/{triplexator_params}/raw.tpx",
		cCRE_fasta="cCRE.bed.fa",
		ssRNA_file="{ssRNA}.fa"
	output:
		"tpx_paramspace/{ssRNA}/{dsDNA}.bed/{triplexator_params}/raw.tpx.custom_summary.pre"
	shell: """
		unhead {input.tpx} | cut -f 1,4 | symbol_count | translate -a -r <(fasta_length < {input.cCRE_fasta}) 2 | translate -a -r <(fasta_length < {input.ssRNA_file}) 1 > {output}
	"""

rule custom_summary:
	input:
		"{file_path}/raw.tpx.custom_summary.pre"
	output:
		"{file_path}/raw.tpx.custom_summary"
	shell: """
        ../../local/src/tiplexator_t_pot_norm.py -l 3 -L -1 < {input} > {output}
	"""

rule custom_summary_neg_pos:
	input:
		custom_summary="{file_path}/raw.tpx.custom_summary",
		summary_neg_pos="{file_path}/raw.tpx.summary.neg_pos"
	output:
		"{file_path}/raw.tpx.custom_summary.neg_pos"
	shell: """
		unhead {input.summary_neg_pos} | translate -a -r <(cut -f 2,7 {input.custom_summary}) 1 | bawk 'BEGIN{{print "Duplex_ID","neg_pos","t_pot","custom_t_pot"}} {{print $0}}'> {output}
	"""

rule covered_frac:
	input:
		tpx="{file_path}/raw.tpx",
		cCRE_bed="cCRE.bed"
	output:
		"{file_path}/raw.tpx.covered_frac"
	shell: """
		bawk '{{print $4,$5,$6}}' {input.tpx} | unhead | bedtools sort | bedtools merge | bawk '{{print $1,$3-$2}}' | stat_base -g -t | translate -a -r <(bawk '{{print $4,$3-$2}}' {input.cCRE_bed}) 1 | bawk 'BEGIN{{print "Duplex_ID","TTS_covered_len","TTS_covered_frac"}} {{print $1,$2,$2/$3}}' > {output}
	"""


rule summary_clean:
	input:
		"{file_path}/raw.tpx.custom_summary"
	output:
		"{file_path}/raw.tpx.custom_summary.clean"
	shell: """
		bawk 'BEGIN{{print "Duplex_ID","ssRNA","summary_total_tpx","summary_t_pot"}} NR>1 {{print $2,$1,$3,$4}}' {input} > {output}
	"""


rule summary_clean_covered_frac:
	input:
		covered_fraction="{file_path}/raw.tpx.covered_frac",
		summary_clean="{file_path}/raw.tpx.custom_summary.clean"
	output:
		"{file_path}/raw.tpx.custom_summary.clean.covered_frac"
	shell: """
		translate -a {input.covered_fraction} 1 < {input.summary_clean} > {output}
	"""

#TERC-cCRE.bed.tpx.raw%.neg_pos_rand: TERC.neg_pos_rand.bed TERC-cCRE.bed.tpx.raw%
#translate -a -r <(echo -e "Duplex_ID\tneg_pos"; cut -f 4,6 $<) 1 < $^2 > $@

# CONTROLLARE !!

#rule neg_pos_rand:
#	input:
#		neg_pos_rand="{ssRNA}.neg_pos_rand.bed",
#		tpx_file="tpx_paramspace/{ssRNA}/{file_path}/raw.tpx.{params}"
#	output:
#		"tpx_paramspace/{ssRNA}/{file_path}/raw.tpx.{params}.neg_pos_rand"
#	shell: """
#		translate -a -r <(echo -e "Duplex_ID\tneg_pos"; cut -f 4,6 {input.neg_pos_rand}) 1 < {input.tpx_file} > {output}
#	"""




rule stability_best:
	input:
		"{file_path}/raw.tpx.stability"
	output:
		"{file_path}/raw.tpx.stability.best"
	shell: """
		find_best 4 14 < {input} > {output}
	"""

rule stability_tot_norm:
	input:
		stability_file="{file_path}/raw.tpx.stability",
		cCRE_bed="cCRE.bed"
	output:
		"{file_path}/raw.tpx.stability.tot_norm"
	shell: """
		cut -f 4,14 < {input.stability_file} | bsort | stat_base -g -t | translate -a -r <(bawk '{{print $4,$3-$2}}' {input.cCRE_bed}) 1 | bawk '{{print $1,$2,$2/$3}}' > {output}
	"""


rule summary_clean_covered_frac_stability:
	input:
		best_stability="{file_path}/raw.tpx.stability.best",
		summary_clean_covfrac="{file_path}/raw.tpx.custom_summary.clean.covered_frac",
		stability_tot_norm="{file_path}/raw.tpx.stability.tot_norm"
	output:
		"{file_path}/raw.tpx.custom_summary.clean.covered_frac.stability."



#TERC-cCRE.bed.tpx.raw_%.summary.clean.covered_frac.stability.custom_t_pot.neg_pos_rand: TERC-cCRE.bed.tpx.raw_%.custom_summary.header_added TERC-cCRE.bed.tpx.raw_%.summary.clean.covered_frac.stability.neg_pos_rand
# translate -a -r -f 2 $< 1 < $^2 1 > $@

# CONTROLLARE !!

#rule summary_clean_covered_frac_stability_custom_t_pot_neg_pos:
#	input:
#		custom_summary="{file_path}/raw.tpx.custom_summary",
#		summary_clean="{file_path}/raw.tpx.custom_summary.clean.covered_frac.stability."



#rule triplexator:
#	input:
#		ssRNA_file="{ssRNA}.fa",
#		dsDNA_file="{dsDNA}.fa"
#	output:
#		tpx="{ssRNA}-{dsDNA}.tpx.raw_%s" % TRIPLEXATOR_PARAM.replace(" ",""), 
#		summary="{ssRNA}-{dsDNA}.tpx.raw_%s.summary" % TRIPLEXATOR_PARAM.replace(" ","")
#	#log: 
#	#	"logs/{ssRNA}-{dsDNA}.tpx.log"
#	#shadow: "shallow"
#	shell: """
#		mkdir -p logs;
#		docker run -u `id -u`:{DOCKER_GROUP} --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} triplexator:{config[TRIPLEXATOR_DOCKER]} bash -c "cd {PWD};
#		triplexator {TRIPLEXATOR_PARAM} -fm 0 -of {config[TRIPLEXATOR_ALN]} -o {output.tpx} -rm 2 -p {NCPUS} -ss {input.ssRNA_file} -ds {input.dsDNA_file}";
#		""" + \
#		TRIPLEXATOR_ALN_2_ONE_LINE + \
#		"""
#		mv {output.tpx}.log logs/
#	"""

#rule triplexator_filter:
#	input:
#		"{path}.tpx.raw"
#	output:
#		"{path}.tpx"
#	shell: """
#		bawk '$Score>={config[TRIPLEXATOR_SCORE_CUTOFF]}' {input} > {output}
#	"""


rule gzip_precomputed_tpx_file:
	input:
		raw="{file_name}.tpx.raw",
		filtered="{file_name}.tpx",
		summary="{file_name}.tpx.raw.summary"
	output:
		raw="precomputed_tpx/{file_name}.tpx.raw.gz",
		filtered="precomputed_tpx/{file_name}.tpx.gz",
		summary="precomputed_tpx/{file_name}.tpx.raw.summary.gz"
	shell:"""
		mkdir -p precomputed_tpx;
		gzip < {input.raw} > {output.raw};
		gzip < {input.filtered} > {output.filtered};
		gzip < {input.summary} > {output.summary};
		rm {input.raw} {input.filtered} {input.summary}
	"""


#rule link_tpx:
#	input:
#		"precomputed_tpx/{ssRNA}-cCRE.bed.tpx.gz"
#	output:
#		"tpx_analysis/{ssRNA}/cCRE.tpx.gz"
#	shell: """
#		mkdir -p tpx_analysis/{wildcards.ssRNA};
#		cd tpx_analysis/{wildcards.ssRNA};
#		ln -s ../../{input} cCRE.tpx.gz
#	"""

rule tpx_stabilty:
	input:
		"tpx_analysis/{ssRNA}/cCRE.tpx.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.stability.gz"
	shell:"""
		zcat {input} | unhead | ../../local/src/tpx_thermal_stability.py | gzip > {output}
	"""

rule tpx_stabilty_generic:
	input:
		"{path}.tpx"
	output:
		"{path}.tpx.stability"
	shell:"""
		cat {input} | unhead | ../../local/src/tpx_thermal_stability.py > {output}
	"""
	
rule tpx_stability_tfo_profile:
	input:
		"tpx_analysis/{ssRNA}/cCRE.tpx.stability.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.stability.cut_{stability_cutoff}.tfo_profile"
	shell:"""	
		bawk '$Stability>={wildcards.stability_cutoff} {{print $Duplex_ID,$Stability,$1,$2,$3,$4}}' {input} | find_best 1 2 | cut -f 3- | bedtools sort | bedtools merge -c 4 -o count_distinct > {output}
	"""


rule longTarget_best_score_complete:
	input:
		cCRE_bed="cCRE.bed",
		tpx_best="tpx_analysis/{ssRNA}/cCRE.tpx.best.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.gz"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		zcat {input.tpx_best} | tab2matrix -e 0 -C <(cut -f 4 {input.cCRE_bed}) | matrix2tab | gzip > {output}
	""" 


rule longTarget_best_score_complete_active:
	input:
		cCRE_bed="cCRE.bed",
		tpx_best_complete="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.gz",
		cond_neg_pos_bed="{condition}.{neg_pos}.bed"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos,\w+}.gz"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		zcat {input.tpx_best_complete} | translate -a -r -k <(cut -f 4- {input.cond_neg_pos_bed}) 2 | gzip > {output}
	"""

rule fisher_select_cutoff:
	input:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		zcat {input} | bawk '{{print $1"@"$4,$3,$5}}' | fisher_select_cutoff | tr "@" "\\t" > {output}
	"""
#zcat {input} | bawk '{{print $1";"$4,int($3/10),$5}}' | fisher_select_cutoff | tr ";" "\\t" > {output}


rule fisher_best_cutoff:
	input:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff.best"
	shell:"""
		find_best -r 1 9 < {input} > {output}
	"""

rule fisher_best_cutoff_cut:
	input:
		neg_pos="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.gz",
		cutoff="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff.best"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.best_cut.gz"
	shell:"""
		bawk -v C=$(bawk '{{print $3}}' {input.cutoff}) '$3>=C' {input.neg_pos} | gzip > {output}
	"""

	#	cutoff="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}-{neg_pos}.fisher_select_cutoff.best"
#rule tpx_stability_best_cutoff:
#	input:
#		tpx_stability="tpx_analysis/{ssRNA}/cCRE.tpx.best.gz"
#	output:
#		"tpx_analysis/{ssRNA}/cCRE.tpx.best.cutoff_{}.gz"
#	shell:"""
#		ciao
#	"""

rule:
	input:
		tpx="tpx_analysis/{ssRNA}/{target_regions}.tpx.gz",
		bed="{target_regions}.bed"
	output:
		"tpx_analysis/{ssRNA}/{target_regions}.tpx.tts_genom_coords.pre"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		zcat {input.tpx} | unhead | translate -r -a -f 4 <(cut -f -4 {input.bed}) 4 > {output}
	"""
rule:
	input:
		"{file}.tpx.tts_genom_coords.pre"	
	output:
		"{file}.tpx.tts_genom_coords"
	shell:"""
		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bawk '{{TTS_start_genom=$TTS_start+$region_b; TTS_end_genom=$TTS_end+$region_b; print $0,TTS_start_genom,TTS_end_genom}}' {input} > {output}
	"""
rule:
	input:
		"{file}.tpx.tts_genom_coords"	
	output:
		"{file}.tpx.tts_genom_coords.bed"
	shell:"""
		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bawk '{{print $region_chr,$TTS_start_genom,$TTS_end_genom, $sequence_id "-" $Duplex_ID, $Score,$Strand,$sequence_id,$TFO_start,$TFO_end,$Error_rate,$Errors,$Motif,$Orientation,$Guanine_rate,$Duplex_ID,$region_b,$region_e}}' {input}\
		| id2count -a 4  > {output}
	"""
rule assoc_genehancer:
	input:
		tpx="{file}.tpx.tts_genom_coords.bed",
		genehancer="/sto1/ref/bioinfotree/task/GeneHancer/dataset/v5/genehancer.connected_genes.signif.clean_ensg.entrez.rr_coords.tissue.bed"
	output:
		"{file}.tpx.tts_genom_coords.assoc_genes"
	shell:"""
		#{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bedtools intersect -loj -a {input.tpx} -b {input.genehancer}\
		| bawk '{{print $7,$15,$22,$23,$24, $5}}' > {output}
	"""

"""

.META: *.tpx.gz
	1       ssRNA
	2       TFO_start
	3       TFO_end
	4       Duplex_ID
	5       TTS_start
	6       TTS_end
	7       Score
	8       Error_rate
	9       Errors
	10      Motif
	11      Strand
	12      Orientation
	13      Guanine_rate

.META: *.tpx.stability.gz
	1       ssRNA
	2       TFO_start
	3       TFO_end
	4       Duplex_ID
	5       TTS_start
	6       TTS_end
	7       Score
	8       Error_rate
	9       Errors
	10      Motif
	11      Strand
	12      Orientation
	13      Guanine_rate
	14      Stability

.META: *.tpx.tts_genom_coords.assoc_genes
	1	ssRNA
	2	cCRE
	2	genehancer_region
	3	gene
	4	EntrezGene
	4	tpx_score	

.META: *.tpx.tts_genom_coords.pre
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	region_chr
	15	region_b
	16	region_e

.META: *.tpx.tts_genom_coords
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	region_chr
	15	region_b
	16	region_e
	17	TTS_start_genom
	18	TTS_end_genom

.META: *.tpx.tts_genom_coords.bed
	1	region_chr
	2	TTS_start
	3	TTS_end
	4	TTS_name
	5	Score
	6	Strand
	7	sequence_id
	8	TFO_start
	9	TFO_end
	10	Error_rate
	11	Errors
	12	Motif
	13	Orientation
	14	Guanine_rate
	15	region_name
	16	region_b
	17	region_e

.META: *.fisher_select_cutoff
	1	ssRNA
	2	greater_and_positive
	3	lower_and_positive
	4	greater_and_negative
	5	lower_and_negative
	6	oddsratio
	7	pvalue

.META: cCRE.tpx.best.complete.*-neg_pos.gz
	1	ssRNA	HOTTIP
	2	region	merged_ChIRP_1
	3	score	0
	4	condition	HOTTIP
	5	neg_pos	pos

.META: cCRE.tpx.best.complete.*-neg_pos_rand.gz
	1	ssRNA	HOTTIP
	2	region	merged_ChIRP_1
	3	score	0
	4	condition	HOTTIP
	5	neg_pos	pos


"""


rule barplot_lncRNA_condition:
	input:
		#"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}_neg_pos.fisher_select_cutoff"
		"{file}.fisher_select_cutoff"
	output:
		# tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}_neg_pos.fisher_select_cutoff.barplot.pdf
		"{file}.fisher_select_cutoff.barplot.pdf"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		../../local/src/single_barplot.R < {input} > {output}
	"""



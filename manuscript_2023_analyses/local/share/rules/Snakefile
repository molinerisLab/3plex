######################
#  General Parameters

NCPUS=os.environ.get("NCPUS",28)
PWD=os.environ.get("PWD")
REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT+"bioinfotree/task/"
CONDA_ACTIVATE="set +u; source %s/miniconda2/etc/profile.d/conda.sh ; conda activate ; conda activate" % REFERENCE_ROOT


#####################
#  Gencode Parameters

GENCODE_SPECIES="hsapiens"
GENCODE_VERSION="32"
GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"gencode/dataset/"+GENCODE_SPECIES+"/"+GENCODE_VERSION
CCRE_DIR=BIOINFO_REFERENCE_ROOT+"encode-screen/dataset/v13/"


######################
#  Docker Parameters

#DOCKER_GROUP=os.environ.get("DOCKER_GROUP")
DOCKER_GROUP="10001"
DOCKER_DATA_DIR=os.environ.get("DOCKER_DATA_DIR")
SCRATCH=os.environ.get("SCRATCH")


######################
#  Triplexator Parameters

TRIPLEXATOR_PARAM="-l 10 -L -1 -e 20 -E -1"
TRIPLEXATOR_SCORE_CUTOFF="10"


#####################
#  Rules

def get_all_triplexator_selected_input(wildcards):
	with open("selected_ssRNA_id", mode='rt') as fh:
            for line in fh:
                yield "precomputed_tpx/{}-cCRE.bed.tpx.gz".format(line.rstrip())

rule all_triplexator:
        input:  
            get_all_triplexator_selected_input

def get_all_fisher(wildcards):
	with open("selected_lncRNA.contrasts",mode='rt') as fh:
		for line in fh:
			ssRNA,diff,stem = line.rstrip().split("\t")
			yield "tpx_analysis/{}/cCRE.tpx.best.complete.{}_{}_neg_pos.fisher_select_cutoff".format(ssRNA,diff,stem)

rule all_fisher:
	input:
		get_all_fisher

rule cCRE_fasta:
	input:
		assembly=GENCODE_DIR+"/GRCh38.primary_assembly.genome.clean_id.fa",
		cCRE_bed="cCRE.bed"
	output:
		"cCRE.bed.fa"
#	priority: 100
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bedtools getfasta -name -fi {input.assembly} -bed {input.cCRE_bed} -fo {output}
	"""

rule get_fasta:
	input:  
		"longest_transcripts.fa"
	output: 
		temp("{GeneID,[\w\.]+}.fa")
        #container:
        #        "../../local/share/images/bit.wip-rnaseq.0.4.img"
	threads: 1
	shell: """
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		get_fasta -i {wildcards.GeneID} < {input} > {output}
	"""

#ruleorder: cCRE_fasta > get_fasta

rule get_longest_transcripts:
	input:
		GENCODE_DIR+"/gencode.v32.transcripts.fa.gz"
	output:
		"longest_transcripts.fa"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8; 
		zcat {input} | fasta2oneline | tr "|" "\t" | bawk '$8!="retained_intron"' | find_best 6 7 | cut -f 6,10 | tab2fasta | fold > {output}
	"""


rule cCRE_bed:
	input:
		CCRE_DIR+"GRCh38-ccREs.bed"
	output:
		"cCRE.bed"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bawk '$6=="PLS" || $6=="dELS" || $6=="pELS"' {input} > {output}
	"""
 
rule triplexator:
	input:
		ssRNA_file="{ssRNA}.fa",
		dsDNA_file="{dsDNA}.fa"
	output:
		"{ssRNA}-{dsDNA}.tpx"
	#log: 
	#	"logs/{ssRNA}-{dsDNA}.tpx.log"
	#shadow: "shallow"
	shell: """
		mkdir -p logs;
		docker run -u `id -u`:{DOCKER_GROUP} --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} triplexator:v0.02 bash -c "cd {PWD};
		triplexator {TRIPLEXATOR_PARAM} -fm 0 -of 0 -o {output} -rm 2 -p {NCPUS} -ss {input.ssRNA_file} -ds {input.dsDNA_file}"
		bawk '$Score>={TRIPLEXATOR_SCORE_CUTOFF}' {output} > {output}.tmp
		mv {output}.tmp {output}
		mv {output}.log logs/
		rm -rf {output}.summary
	"""


rule gzip_precomputed_tpx_file:
	input:
		"{file_name}.tpx"
	output:
		"precomputed_tpx/{file_name}.tpx.gz"
	shell:"""
		mkdir -p precomputed_tpx;
		gzip < {input} > {output};
		rm {input}
	"""


rule link_tpx:
	input:
		"precomputed_tpx/{ssRNA}-cCRE.bed.tpx.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.gz"
	shell: """
		mkdir -p tpx_analysis/{wildcards.ssRNA};
		cd tpx_analysis/{wildcards.ssRNA};
		ln -s ../../{input} cCRE.tpx.gz
	"""

rule triplexator_best_score:
	input:
		"tpx_analysis/{ssRNA}/cCRE.tpx.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.gz"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		bawk 'NR>1 {{print $1";"$4,$7}}' {input} | find_best 1 2 | tr ";" "\\t" | gzip > {output}
	"""


rule triplexator_best_score_complete:
	input:
		cCRE_bed="cCRE.bed",
		tpx_best="tpx_analysis/{ssRNA}/cCRE.tpx.best.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.gz"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		zcat {input.tpx_best} | tab2matrix -e 0 -C <(cut -f 4 {input.cCRE_bed}) | matrix2tab | gzip > {output}
	""" 


rule triplexator_best_score_complete_active:
	input:
		cCRE_bed="cCRE.bed",
		tpx_best_complete="tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.gz",
		cond_neg_pos_bed="{condition}.neg_pos.bed"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}_neg_pos.gz"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		zcat {input.tpx_best_complete} | translate <(cut -f 4,5 {input.cCRE_bed}) 2 | translate -a -r -k <(cut -f 4- {input.cond_neg_pos_bed}) 2 | gzip > {output}
	"""

rule fisher_select_cutoff:
	input:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}_neg_pos.gz"
	output:
		"tpx_analysis/{ssRNA}/cCRE.tpx.best.complete.{condition}_neg_pos.fisher_select_cutoff"
	shell:"""
		{CONDA_ACTIVATE} bit_rnaseq_2.8;
		zcat {input} | bawk '{{print $1";"$4,$3,$5}}' | fisher_select_cutoff | tr ";" "\\t" > {output}
	"""




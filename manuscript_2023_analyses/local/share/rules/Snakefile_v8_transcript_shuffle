from snakemake.utils import Paramspace
import pandas as pd

configfile: "config.yaml"

include: "config.sk"

######################
#  General Parameters

PWD=os.environ.get("PWD")
REFERENCE_ROOT=os.environ.get("REFERENCE_ROOT")
BIOINFO_REFERENCE_ROOT=REFERENCE_ROOT+"/bioinfotree/task/"

####################
#  Conda Parameters

CONDA_ROOT="/opt/conda"
CONDA_VERSION="miniconda3"
CONDA_ACTIVATE="set +u; source "+CONDA_ROOT+"/"+CONDA_VERSION+"/etc/profile.d/conda.sh; conda activate ; conda activate "

######################
#  Gencode Parameters

GENCODE_SPECIES=config["GENCODE_SPECIES"]
GENCODE_VERSION=config["GENCODE_VERSION"]
GENCODE_DIR=BIOINFO_REFERENCE_ROOT+"gencode/dataset/"+GENCODE_SPECIES+"/"+GENCODE_VERSION
GENOME_ASSEMBLY=config["GENOME_ASSEMBLY"]
GENOME_ASSEMBLY_DIR=GENCODE_DIR+"/"+GENOME_ASSEMBLY

######################
#  Docker Parameters

DOCKER_GROUP="10001"
DOCKER_DATA_DIR=os.environ.get("DOCKER_DATA_DIR")
SCRATCH=os.environ.get("SCRATCH")

##########################
#  Triplexator Parameters

triplexator_paramspace = Paramspace(pd.read_csv("triplexator_params.tsv", sep="\t"))

#############
# Target ALL

rule all:
	input:
		"3plex.summary.pos_neg.ALL.matrix.AUC_cmp.gz",
		"triplexAligner.best_logE.pos_neg.ALL.matrix.AUC_cmp.gz",
		"fasim_LongTarget.best_meanStab.pos_neg.ALL.matrix.AUC_cmp.gz"

#####################
#  Generic Rules

rule header_added:
	input:
		"{file}"
	output:
		"{file}.header_added"
	shell:"""
		(bawk -M {input} | cut -f 2 | transpose; cat {input} ) > {output}
	"""

rule header_added_gz:
	input:
		"{file}.gz"
	output:
		"{file}.header_added.gz"
	shell:"""
		(bawk -M {input} | cut -f 2 | transpose; cat {input} ) | gzip > {output}
	"""

#####################
#  Transcript Rules

rule get_longest_transcripts:
	input:
		GENCODE_DIR+"/transcripts.fa.gz"
	output:
		"longest_transcripts.fa"
	shell:"""
		zcat {input} | fasta2oneline | tr "|" "\\t" | bawk '$8!="retained_intron"' | find_best 6 7 | cut -f 6,10 | tab2fasta | fold | tr "-" "_" > {output}
	"""

rule get_fasta:
	input:  
		"longest_transcripts.fa"
	output: 
		"{GeneID,[\w\.-]+}.fa"
	shell: """
		get_fasta -i {wildcards.GeneID} < {input} > {output}
	"""

ruleorder: fasta_shuffle > get_fasta
rule fasta_shuffle:
	input:  
		"{GeneID}.fa"
	output: 
		"{GeneID}_shuffle_k{kmer}.fa"
	shell: """
		{CONDA_ACTIVATE} /home/imoliner/.conda/envs/meme; \
		fasta-shuffle-letters -kmer {wildcards.kmer} {input} | sed 's/shuf/shuffle_k{wildcards.kmer}/' > {output}
	"""

#########################
#  Genomic Regions Rules

rule get_pos_bed:
	input:
		"../../local/share/data/ALL_v8.neg_pos_rand.bed.gz"
	output:
		"{ssRNA}.pos.bed"
	shell: """
		zgrep '{config[PEAK_VERSION]}' {input} | tr "-" "_" | bawk '$2=="{wildcards.ssRNA}" && $9=="pos" {{print $3~6";"$7,$8,$9}}' > {output}
	"""

rule get_shuffle_bed:
	input:
		"{ssRNA}.pos.bed"
	output:
		"{ssRNA}.shuffle.bed"
	shell: """
		bawk '{{print $1~3,"neg_"$4,$5,"neg"}}' {input} > {output}
	"""

ruleorder: bed_to_fasta > get_fasta
rule bed_to_fasta:
	input:
		assembly=GENOME_ASSEMBLY_DIR+".primary_assembly.genome.clean_id.fa",
		bed_file="{path}.bed"
	output:
		"{path}.bed.fa"
	shell:"""
		bedtools getfasta -name -fi {input.assembly} -bed {input.bed_file} -fo {output}
	"""

###############
# Run 3plex

rule run_3plex:
	input:
		ssRNA_file="{ssRNA}.fa",
		dsDNA_file="{ssRNA}.pos.bed.fa"
	params:
		params_instance=triplexator_paramspace.instance
	output:
		"tpx_paramspace/{ssRNA}/{ssRNA}.pos.bed/"+f"{triplexator_paramspace.wildcard_pattern}/3plex.summary.gz"
	threads: 24
	shell: """
		docker run -u `id -u`:`id -g` --rm -v $PWD:$PWD imolineris/3plex:v0.1.2-beta -j {threads} -l {wildcards.min_length} -L {wildcards.max_length} -e {wildcards.error_rate} -g {wildcards.guanine_rate} -r {wildcards.filter_repeat} -c {wildcards.consecutive_errors} -s {wildcards.single_strandedness} $PWD/{input.ssRNA_file} $PWD/{input.dsDNA_file} $PWD; \
        mv {wildcards.ssRNA}_ssmasked-{wildcards.ssRNA}.pos.bed.tpx.summary.gz {output}; \
		rm {wildcards.ssRNA}_ssmasked-{wildcards.ssRNA}.pos.bed.tpx.stability.gz
	"""

rule run_3plex_shuffle:
	input:
		ssRNA_file="{ssRNA}_shuffle_k{kmer}.fa",
		dsDNA_file="{ssRNA}.shuffle.bed.fa"
	params:
		params_instance=triplexator_paramspace.instance
	output:
		"tpx_paramspace/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/"+f"{triplexator_paramspace.wildcard_pattern}/3plex.summary.gz"
	threads: 24
	shell: """
		docker run -u `id -u`:`id -g` --rm -v $PWD:$PWD imolineris/3plex:v0.1.2-beta -j {threads} -l {wildcards.min_length} -L {wildcards.max_length} -e {wildcards.error_rate} -g {wildcards.guanine_rate} -r {wildcards.filter_repeat} -c {wildcards.consecutive_errors} -s {wildcards.single_strandedness} $PWD/{input.ssRNA_file} $PWD/{input.dsDNA_file} $PWD; \
        mv {wildcards.ssRNA}_shuffle_k{wildcards.kmer}_ssmasked-{wildcards.ssRNA}.shuffle.bed.tpx.summary.gz {output}; \
		rm {wildcards.ssRNA}_shuffle_k{wildcards.kmer}_ssmasked-{wildcards.ssRNA}.shuffle.bed.tpx.stability.gz
	"""

rule add_zeros_3plex:
	input:
		bed="{bed_file}.bed",
		score_3plex="{prefix}/{bed_file}.bed/{path}/3plex.summary.gz"
	output:
		"{prefix}/{bed_file}.bed/{path}/3plex.summary.add_zeros.gz"
	shell:"""
		 bawk 'BEGIN{{print "Duplex_ID","pos_neg"}}{{print $4,$6}}' {input.bed} | translate -a -v -e 0 <(zcat {input.score_3plex}) 1  | cut -f1,12- | gzip > {output} 
	"""

rule pos_neg_3plex:
	input:
		score_3plex_pos="tpx_paramspace/{ssRNA}/{ssRNA}.pos.bed/{path}/3plex.summary.add_zeros.gz",
		score_3plex_neg="tpx_paramspace/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/{path}/3plex.summary.add_zeros.gz"
	output:
		"tpx_paramspace/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/{path}/3plex.summary.pos_neg.gz"
	shell:"""
		 cat {input.score_3plex_pos} {input.score_3plex_neg} > {output}
	"""

rule all_3plex_pos_neg:
	input: 
		expand("tpx_paramspace/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/{params}/3plex.summary.pos_neg.gz",
				kmer = config["FASTA_SHUFFLE_K"],
				params = triplexator_paramspace.instance_patterns,
				ssRNA = all_selected_ssRNA_id()
			)
	output:
		"3plex.summary.pos_neg.ALL.gz"
	shell: """
		matrix_reduce -t 'tpx_paramspace/*_shuffle_*/*.shuffle.bed/min_length~*/max_length~-1/error_rate~*/guanine_rate~*/filter_repeat~*/consecutive_errors~*/single_strandedness~*/3plex.summary.pos_neg.gz' \
		| grep -v 'pos_neg' | gzip > {output}
	"""

rule all_3plex_pos_neg_matrix:
	input:
		"3plex.summary.pos_neg.ALL.gz"
	output:
		"d3plex.matrix.gz"
	shell: """
		 bawk '{{split($1,a,";"); id=a[2]"_"a[4]"_"a[5]"_"a[6]"_"a[7]"_"a[8]"_"a[9]; print $7";"$2,id"_Stability_best",$3; print $7";"$2,id"_Stability_norm",$6}}' {input} \
		 | tab2matrix -r "pos_neg;peak;ssRNA" \
		 | bawk '{{split($1,a,";"); print a[1],$0}}' \
		 | cut -f 1,3- | gzip > {output}
	"""

rule all_3plex_pos_neg_matrix_auc_cmp:
	input:
		"d3plex.matrix.gz"
	output:
		"d3plex.matrix.AUC_cmp.gz"
	shell: """
		{CONDA_ACTIVATE} pROC_Env; \
		zcat {input} \
		| ../../local/src/ROC.R pos_neg $(zcat {input} | head -n1 | cut -f2- | tr "\\t" " ") -d "<" | gzip > {output}
	"""


######################
#  Run triplexAligner

if config["GENCODE_SPECIES"] == "hsapiens":
	SPECIES = "hs"
elif config["GENCODE_SPECIES"] == "mmusculus":
	SPECIES = "mm"

rule run_triplexAligner:
	input:
		ssRNA="{ssRNA}.fa",
		dsDNA="{ssRNA}.pos.bed.fa"
	output:
		"triplexAligner/{ssRNA}/{ssRNA}.pos.bed/tpx.gz"
	shell: """
		mkdir -p `dirname {output}`;\
		docker run -u `id -u`:{DOCKER_GROUP} --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} triplex_aligner $PWD/{input.dsDNA} $PWD/{input.ssRNA} {SPECIES} | gzip > {output}
"""

rule run_triplexAligner_shuffle:
	input:
		ssRNA="{ssRNA}_shuffle_k{kmer}.fa",
		dsDNA="{ssRNA}.shuffle.bed.fa"
	output:
		"triplexAligner/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/tpx.gz"
	shell: """
		mkdir -p `dirname {output}`;\
		docker run -u `id -u`:{DOCKER_GROUP} --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} triplex_aligner $PWD/{input.dsDNA} $PWD/{input.ssRNA} {SPECIES} | gzip > {output}
"""

rule best_logE_triplexAligner:
	input:
		triplexAlign="triplexAligner/{ssRNA}/{dsDNA}.bed/tpx.gz",
		neg_pos="{dsDNA}.bed"
	output:
		"triplexAligner/{ssRNA}/{dsDNA}.bed/tpx.best_logE.gz"
	shell: """
		cut -f4,6 {input.neg_pos} | \
		translate -a -v -e 0 -f 2 <(zcat {input.triplexAlign} | find_best --skip_header 12 10 | cut -f10,12 ) 1 | \
		bawk 'BEGIN{{print "peak","best_meanStab","neg_pos"}}{{print}}' | gzip > {output}
	"""

rule pos_neg_triplexAligner:
	input:
		score_triplexAligner_pos="triplexAligner/{ssRNA}/{ssRNA}.pos.bed/tpx.best_logE.gz",
		score_triplexAligner_neg="triplexAligner/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/tpx.best_logE.gz"
	output:
		"triplexAligner/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/tpx.best_logE.pos_neg.gz"
	shell:"""
		 cat {input.score_triplexAligner_pos} {input.score_triplexAligner_neg} > {output}
	"""

rule all_triplexAligner:
	input:
		expand("triplexAligner/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.bed/tpx.best_logE.pos_neg.gz",
			ssRNA = all_selected_ssRNA_id(),
			kmer = config["FASTA_SHUFFLE_K"]
		)
	output:
		"triplexAligner.best_logE.pos_neg.ALL.gz"
	shell: """
		matrix_reduce -t 'triplexAligner/*_shuffle_*/*.shuffle.bed/tpx.best_logE.pos_neg.gz' \
		| grep -v 'neg_pos' | gzip > {output}
	"""

rule all_triplexAligner_matrix:
	input:
		"triplexAligner.best_logE.pos_neg.ALL.gz"
	output:
		"triplexAligner.matrix.gz"
	shell: """
		 bawk '{{split($1,a,";"); print $4";"$2, a[2], $3}}' {input} \
		| tab2matrix -r "pos_neg;peak;ssRNA" \
		| bawk '{{split($1,a,";"); print a[1],$0}}' | cut -f 1,3- | gzip > {output}
	"""

rule all_triplexAligner_matrix_auc_cmp:
	input:
		"triplexAligner.matrix.gz"
	output:
		"triplexAligner.matrix.AUC_cmp.gz"
	shell: """
		{CONDA_ACTIVATE} pROC_Env; \
		zcat {input} \
		| ../../local/src/ROC.R pos_neg $(zcat {input} | head -n1 | cut -f2- | tr "\\t" " ") -d "<" | gzip > {output}
	"""

########################
#  Run fasim-LongTarget

ruleorder: fasim_fasta_format > get_fasta
rule fasim_fasta_format:
	input:
		bed="{path}.bed",
		assembly=GENOME_ASSEMBLY_DIR+".primary_assembly.genome.clean_id.fa"
	output:
		"{path}.fasim.fa"
	shell: """
		 bawk '{{split($4,a,";"); print $1~3,a[2]"|"$4,$5,$6}}' {input.bed} | \
		 bedtools getfasta -name+ -fi {input.assembly} -bed - | \
		 sed -e 's/::/|/g' > {output}
	"""

rule run_fasimLongTarget:
	input:
		ssRNA="{ssRNA}.fa",
		dsDNA="{ssRNA}.pos.fasim.fa"
	output:
		"fasim_LongTarget/{ssRNA}/{ssRNA}.pos.fasim/fastSim-TFOsorted"
	shell: """
		mkdir -p `dirname {output}`;\
		docker run --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} fasim \
		-f1 $PWD/{input.dsDNA} \
		-f2 $PWD/{input.ssRNA} \
		-O $PWD/`dirname {output}`; \
		mv fasim_LongTarget/{wildcards.ssRNA}/{wildcards.ssRNA}.pos.fasim/{wildcards.ssRNA}-{wildcards.ssRNA}-fastSim-TFOsorted {output}
"""

rule run_fasimLongTarget_shuffle:
	input:
		ssRNA="{ssRNA}_shuffle_k{kmer}.fa",
		dsDNA="{ssRNA}.shuffle.fasim.fa"
	output:
		"fasim_LongTarget/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.fasim/fastSim-TFOsorted"
	shell: """
		mkdir -p `dirname {output}`;\
		docker run --rm -v {DOCKER_DATA_DIR}:{DOCKER_DATA_DIR} -v {SCRATCH}:{SCRATCH} fasim \
		-f1 $PWD/{input.dsDNA} \
		-f2 $PWD/{input.ssRNA} \
		-O $PWD/`dirname {output}`; \
		mv fasim_LongTarget/{wildcards.ssRNA}_shuffle_k{wildcards.kmer}/{wildcards.ssRNA}.shuffle.fasim/{wildcards.ssRNA}-{wildcards.ssRNA}_shuffle_k{wildcards.kmer}-fastSim-TFOsorted {output}
"""

rule best_fasimLongTarget:
	input:
		fasim="fasim_LongTarget/{path}/{dsDNA}.fasim/fastSim-TFOsorted",
		neg_pos="{dsDNA}.bed"
	output:
		"fasim_LongTarget/{path}/{dsDNA}.fasim/fastSim-TFOsorted.best_meanStab.gz"
	shell: """
		cut -f4,6 {input.neg_pos} | \
		translate -a -v -e 0 <(cut -f6,9 {input.fasim} | find_best --skip_header 1 2) 1 | \
		bawk 'BEGIN{{print "peak","best_meanStab","neg_pos"}}{{print}}' | gzip > {output}
	"""

rule pos_neg_fasimLongTarget:
	input:
		score_fasimLongTarget_pos="fasim_LongTarget/{ssRNA}/{ssRNA}.pos.fasim/fastSim-TFOsorted.best_meanStab.gz",
		score_fasimLongTarget_neg="fasim_LongTarget/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.fasim/fastSim-TFOsorted.best_meanStab.gz"
	output:
		"fasim_LongTarget/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.fasim/fastSim-TFOsorted.best_meanStab.pos_neg.gz"
	shell:"""
		 cat {input.score_fasimLongTarget_pos} {input.score_fasimLongTarget_neg} > {output}
	"""

rule all_fasimLongTarget:
	input:
		expand("fasim_LongTarget/{ssRNA}_shuffle_k{kmer}/{ssRNA}.shuffle.fasim/fastSim-TFOsorted.best_meanStab.pos_neg.gz",
			ssRNA = all_selected_ssRNA_id(),
			kmer = config["FASTA_SHUFFLE_K"]
		)
	output:
		"fasim_LongTarget.best_meanStab.pos_neg.ALL.gz"
	shell: """
		matrix_reduce -t 'fasim_LongTarget/*_shuffle_*/*.shuffle.fasim/fastSim-TFOsorted.best_meanStab.pos_neg.gz' \
		| grep -v 'neg_pos' | gzip > {output}
	"""

rule all_fasimLongTarget_matrix:
	input:
		"fasim_LongTarget.best_meanStab.pos_neg.ALL.gz"
	output:
		"fasim_LongTarget.matrix.gz"
	shell: """
		bawk '{{split($1,a,";"); print $4";"$2, a[2], $3}}' {input} \
		| tab2matrix -r "pos_neg;peak;ssRNA" \
		| bawk '{{split($1,a,";"); print a[1],$0}}' | cut -f 1,3- | gzip > {output}
	"""

rule all_fasimLongTarget_matrix_auc_cmp:
	input:
		"fasim_LongTarget.matrix.gz"
	output:
		"fasim_LongTarget.matrix.AUC_cmp.gz"
	shell: """
		{CONDA_ACTIVATE} pROC_Env; \
		zcat {input} \
		| ../../local/src/ROC.R pos_neg $(zcat {input} | head -n1 | cut -f2- | tr "\\t" " ") -d "<" | gzip > {output}
	"""


#################
#

if config["GENCODE_SPECIES"] == "hsapiens":
	SPECIES_FULL = "human"
elif config["GENCODE_SPECIES"] == "mmusculus":
	SPECIES_FULL = "mouse"

rule all_auc_no_cmp:
	input:
		"{method}.pos_neg.ALL.matrix.gz"
	output:
		"{method}.pos_neg.ALL.matrix.auc_no_cmp.gz"
	shell: """
		set +u; source /opt/conda/miniconda3/etc/profile.d/conda.sh; conda activate ; conda activate  pROC_Env; \
		zcat {input} | ../../local/src/ROC_no_comp.R pos_neg $(zcat {input} | head -n1 | cut -f2- | tr "\\t" " ") -d "<" | gzip > {output}
	"""

rule all_auc_no_cmp_3plex:
	input:
		"3plex.summary.pos_neg.ALL.matrix.auc_no_cmp.gz"
	output:
		"3plex.summary.pos_neg.ALL.matrix.auc_no_cmp.method_species.gz"
	shell:"""
		bawk 'BEGIN{{print"shuffling","tpx_method","auc","species"}}{{split($1,a,"_"); print a[1],"d3plex_"a[2]"_"a[3]"_"a[4]"_"a[5]"_"a[6]"_"a[7]"_"a[8]"_"a[9],$2,"{SPECIES_FULL}"}}' {input} | gzip > {output}
	"""

rule all_auc_no_cmp_triplexAligner:
	input:
		"triplexAligner.best_logE.pos_neg.ALL.matrix.auc_no_cmp.gz"
	output:
		"triplexAligner.best_logE.pos_neg.ALL.matrix.auc_no_cmp.method_species.gz"
	shell:"""
		bawk 'BEGIN{{print"shuffling","tpx_method","auc","species"}}{{print $1,"triplexAligner",$2,"{SPECIES_FULL}"}}' {input} | gzip > {output}
	"""

rule all_auc_no_cmp_fasimLongTarget:
	input:
		"fasim_LongTarget.best_meanStab.pos_neg.ALL.matrix.auc_no_cmp.gz"
	output:
		"fasim_LongTarget.best_meanStab.pos_neg.ALL.matrix.auc_no_cmp.method_species.gz"
	shell:"""
		bawk 'BEGIN{{print"shuffling","tpx_method","auc","species"}}{{print $1,"fasimLongtarget",$2,"{SPECIES_FULL}"}}' {input} | gzip > {output}
	"""
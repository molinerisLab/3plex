# Before running this rule run the following:
# for ssRNA in $(cat selected_ssRNA); do bmake ${ssRNA}.neg_pos_rand.bed; done

def all_selected_ssRNA_id():
	with open("selected_ssRNA", mode='rt') as fh:
		for line in fh:
			ssRNA = line.rstrip()
			yield ssRNA

def get_all_triplexator_selected_input(wildcards):
	for ssRNA in all_selected_ssRNA_id():
		#for target in expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.summary.gz",
		for target in expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/{ssRNA}.neg_pos_rand.bed/{params}/raw.tpx.custom_summary.neg_pos.gz",
				params = triplexator_paramspace.instance_patterns,
				ssRNA = all_selected_ssRNA_id(),
				single_strandedness_cutoff = config["SINGLE_STRANDEDNESS_CUTOFF"],
				window=config["RNAPLFOLD_WINDOW"]
			):
			yield target

rule all_triplexator:
	input:
		get_all_triplexator_selected_input

rule all_stab_fisher:
	input:
		expand("tpx_paramspace/{ssRNA}_ss{single_strandedness_cutoff}_{window}/cCRE-ALLcond.bed/{params}/raw.tpx.{summarize}.{condition}.neg_pos.fisher_select_cutoff.gz",
			condition = config["ENCODE_CONDITIONS"], 
			params = triplexator_paramspace.instance_patterns,
			ssRNA = all_selected_ssRNA_id(),
			single_strandedness_cutoff = config["SINGLE_STRANDEDNESS_CUTOFF"],
			window=config["RNAPLFOLD_WINDOW"],
			summarize=config['TPXcCRE_SCORE_SUMMARIZE_METHODS']
		)


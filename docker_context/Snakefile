# All paths in the snakefile are interpreted relative to the directory snakemake is executed in. This behaviour can be overridden
configfile: "config.yaml"

rule pato:
	input:
		ssRNA_file="{ssRNA}_ssmasked.fa",
		dsDNA_file="{dsDNA}.fa"
	output:
		tpx = temp("{ssRNA}_ssmasked-{dsDNA}.tpx"),
		summary = temp("{ssRNA}_ssmasked-{dsDNA}.tpx.summary")
	log:
		"{ssRNA}_ssmasked-{dsDNA}.tpx.log"
	threads: 64
	shell: """
		OMP_NUM_THREADS={threads}\
		/opt/bin/pato \
				-l  {config[pato][min_length]} \
				-L  {config[pato][max_length]} \
				-e  {config[pato][error_rate]} \
				-g  {config[pato][guanine_rate]} \
				-fr {config[pato][filter_repeat]} \
				-c  {config[pato][consecutive_errors]} \
				{config[pato][other_parameters]} \
				-of 1 \
				--chunk-size {config[pato][sim_sequences]} \
				-ss {input.ssRNA_file} -ds {input.dsDNA_file} -o {output.tpx} > {log} 2> pato_e.txt
		mv {output.tpx}.out {output.tpx}
	"""

rule tpx_stability:
	input:
		"{path}.tpx"
	output:
		tpx="{path}.tpx.stability.gz",
		tmp=temp("{path}.tpx.stability.gz.tmp")
	shell: """
		tail -n +2 {input} | perl -pe '$_=">$_" if ($.-1)%6==0' | perl -ne 'chomp; print "$_\\t"' | tr ">" "\\n" | tail -n +2 > {output.tmp}
		cat {output.tmp} | tpx_thermal_stability.py | gzip > {output.tpx}
	"""

rule tpx_summary_clean:
	input:
		"{file_path}.tpx.summary"
	output:
		temp("{file_path}.tpx.summary.clean")
	shell:"""
		perl -pe 'if($.==1){{s/^#\s+//; s/ //g; s/-/_/g}}' {input} > {output}
	"""

rule duplex_length:
	input:
		"{file_path}.fa"
	output:
		"{file_path}.fa.length"
	shell:"""
		fasta2oneline < {input} \
		| perl -lane 'BEGIN{{$,="\\t"}} print $F[0],length($F[1])' > {output}
	"""

rule stability_best:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		temp("{file_path}.best.tpx.stability.gz")
	shell: """
		zcat {input} | find_best 4 14 | gzip > {output}
	"""

rule score_best:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		temp("{file_path}.tpx.score_best")
	shell: """
		bawk 'BEGIN{{print "Duplex_ID","Score_best"}} NR>1 {{print $Duplex_ID,$Score}}' {input} \
		| find_best -H 1 2 > {output}
	"""

rule stability_tot_undercount:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		temp("{file_path}.tpx.stability.tot_undercount")
	shell: """
		bawk 'NR>1 {{print $Duplex_ID,$TTS_start,$TTS_end,$Stability}}' {input} \
		| bedtools sort | bedtools merge -c 4 -o max | cut -f 1,4 \
		| bsort \
		| bawk 'BEGIN{{t=0; l=""; print "Duplex_ID","Stability_tot"}}\
			{{
				if($1!=l){{\
					if(l!=""){{print l,t}}\
					t=$2; l=$1\
				}}else{{\
					t+=$2\
				}}\
			}}
			END{{ print l,t}}' > {output}
	"""

rule summary:
	input:
		summary="{ssRNA}_ssmasked-{dsDNA}.tpx.summary.clean",
		stability_best="{ssRNA}_ssmasked-{dsDNA}.best.tpx.stability.gz",
		score_best="{ssRNA}_ssmasked-{dsDNA}.tpx.score_best",
		stability_tot_undercount = "{ssRNA}_ssmasked-{dsDNA}.tpx.stability.tot_undercount",
		duplex_length = "{dsDNA}.fa.length"
	output:
		temp("{ssRNA}_ssmasked-{dsDNA}.tpx.summary.gz")
	shell: """
		cat {input.summary} \
		| translate -a -r -v -e 0 <(bawk 'BEGIN{{print "Duplex_ID","Duplex_length"}} {{print}}' {input.duplex_length}) 1 \
		| translate -a -r -v -e 0 <(bawk 'BEGIN{{print "Duplex_ID","Stability_best"}} NR>1 {{print $Duplex_ID,$Stability}}' {input.stability_best}) 1 \
		| translate -a -r -v -e 0 {input.stability_tot_undercount} 1 \
		| translate -a -r -v -e 0 {input.score_best} 1 > {output}.tmp
		bawk 'NR==1 {{print $0,"Stability_norm"}} NR>1 {{print $0,$Stability_tot/$Duplex_length}}' {output}.tmp | gzip > {output}
		rm {output}.tmp
	"""

rule add_zeros:
	input:
		dsDNA="{dsDNA}.fa",
		summary="{ssRNA}_ssmasked-{dsDNA}.tpx.summary.gz"
	output:
		"{ssRNA}_ssmasked-{dsDNA}.tpx.summary.add_zeros.gz"
	shell:"""
		 awk 'BEGIN{{print "Duplex_ID"}} match($1,/>/){{split($1,a,">"); print a[2]}}' {input.dsDNA} \
		 | translate -a -v -e 0 <(zcat {input.summary}) 1 \
		 | bawk 'NR==1{{print}} NR>1{{$2="{wildcards.ssRNA}"; print}}' \
		 | gzip > {output} 
	"""


######################
# ssRNA 2D structure #
######################

rule RNAplfold_lunp:
	input:
		"{ssRNA}.fa"
	output:
		lunp="RNAplfold/{ssRNA}_lunp",
		basepairs="RNAplfold/{ssRNA}_basepairs"
	shell: """
		mkdir -p RNAplfold; 
		RNAplfold -W {config[RNAplfold][window_size]} -L {config[RNAplfold][span_size]} -u {config[RNAplfold][unpaired_window]} -o < {input}; 
		mv *_lunp {output.lunp}; mv *_basepairs {output.basepairs}
	"""

rule RNAplfold_lunp_modif_zscore:
	input:
		"RNAplfold/{ssRNA}_lunp"
	output:
		"RNAplfold/{ssRNA}_lunp.modif_zscore"
	shell:"""
		grep -v '#' {input} | awk '{{print $(NF)}}' | distMedian.py > {output}
	"""

RNAplfold_WINDOW_CENTER=config["RNAplfold"]["unpaired_window"] / 2

if(config["RNAplfold"]["unpaired_window"] % 2 != 0):
	RNAplfold_WINDOW_CENTER=config["RNAplfold"]["unpaired_window"] / 2 + 0.5

# determine the z-score at a given percentile
# mask the nucleotides with a z-score below that value
rule mask_fasta:
	input:
		RNAplfold_prob="RNAplfold/{ssRNA}_lunp.modif_zscore",
		fasta="{ssRNA}.fa"
	output:
		"{ssRNA}_ssmasked.fa"
	shell:"""
		PERC=$(sort -n {input.RNAplfold_prob} \
		| awk '{{all[NR] = $0}} END{{print all[int(NR*{config[RNAplfold][single_strandedness_cutoff]}/100 - 0.5)]}}');
		bedtools maskfasta \
			-fi {input.fasta} \
			-fo {output} \
			-bed <(awk -v perc=$PERC 'BEGIN{{OFS="\\t"}} $1<perc {{print "{wildcards.ssRNA}",NR - 1 + {RNAplfold_WINDOW_CENTER}, NR + {RNAplfold_WINDOW_CENTER}}}' {input.RNAplfold_prob} | bedtools merge)
	"""


"""

.META: *.tpx.gz
	1       ssRNA
	2       TFO_start
	3       TFO_end
	4       Duplex_ID
	5       TTS_start
	6       TTS_end
	7       Score
	8       Error_rate
	9       Errors
	10      Motif
	11      Strand
	12      Orientation
	13      Guanine_rate

.META: *.tpx.stability.gz *.tpx.stability
	1	ssRNA
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability

.META: raw.tpx.stability.best.gz
	1	Duplex_ID
	2	Stability_best

"""

# All paths in the snakefile are interpreted relative to the directory snakemake is executed in. This behaviour can be overridden


configfile: "config_general.yaml"
configfile: "config.yaml"


PRJ_ROOT=os.environ.get("PRJ_ROOT")
include: "config.smk"
include: PRJ_ROOT + "/docker_context/Snakefile"
report: PRJ_ROOT + "/local/report/workflow.rst"



def get_sequence_name(path):
	sequence = os.path.basename(path)
	if(not 'path' in path and not os.path.isfile(sequence)):
		os.symlink(path, sequence)
	return(re.sub(".fa|.bed", "", sequence))


##################
# dsDNA Specific #
##################

rule dsdna_fasta_from_bed:
	input:
		"{dsDNA}.bed"
	output:
		"{dsDNA}.fa"
	shell: """
		bedtools getfasta -name+ -fi {config[genome_fasta]} -bed {input} -fo {wildcards.dsDNA}.tmp.fa
		seqkit rmdup -s {wildcards.dsDNA}.tmp.fa > {wildcards.dsDNA}.fa
	"""
	
rule shuffle_bed:
	input: 
		bed = "{file}.bed",
		exclude = config["shuffle_blacklist"],
		chrom_info = config["chrom_info"]
	output:
		temp("{file}_shuf_{run,\d+}.bed")
	shell:"""
		bedtools shuffle -excl {input.exclude} -i {input.bed} -g {input.chrom_info} -seed $(date +%s%N) > {output}
		#| bawk '{{$4="rand_"$4; $5="neg"; print}}' 
	"""

rule ln_dsDNA_predefined_fa:
	input:
		config['dsDNA_predefined_fa']
	output:
		"dsDNA.fa"
	shell: """
		ln -s {input} {output}
	"""

rule ln_dsDNA_predefined_bed:
	input:
		config['dsDNA_predefined_bed']
	output:
		"dsDNA.bed"
	shell: """
		ln -s {input} {output}
	"""

rule tts_genome_coords:
       input:
               tpx="{file_path_prefix}-{dsDNA}.tpx.stability.gz",
               bed="{dsDNA}.bed"
       output:
               temp("{file_path_prefix}-{dsDNA}.tpx.stability.tts_genome_coords.gz")
       shell:"""
               zcat {input.tpx} | translate -r -a -f 4 <(bawk 'BEGIN{{ print "TTS_chr", "Duplex_start","Duplex_end","Duplex_ID" }} {{print}}' {input.bed}) 4 > {output}.tmp
               bawk '	NR==1 {{print $0,"TTS_start_genome","TTS_end_genome"}}\
			NR>1  {{TTS_start_genome=$TTS_start+$Duplex_start; TTS_end_genome=$TTS_end+$Duplex_start; print $0,TTS_start_genome,TTS_end_genome}}' {output}.tmp | gzip > {output}
       """

rule tts_genome_coords_bed:
	input:
		"{file}.tts_genome_coords.gz"
	output:
		"{file}.tts_genome_coords.bed"
	shell:"""
		bawk 'NR>1 {{\
			score = int($Stability*10*({config[TTS_bed][ucsc_dark_gray]}/({config[TTS_bed][dark_gray_stability]}*10))); if(a>1000){{a = 1000}}; \
			print $TTS_chr,$TTS_start_genome,$TTS_end_genome,$Duplex_ID,score\\
		}}' {input} | \
		bedtools sort | bedtools merge -i - -c 4,5 -o distinct,max | id2count -a 4 > {output}
	"""



#######################
# Web Server Specific #
#######################

# visualization
rule summary_web_version:
	input:
		"{ssRNA}_ssmasked-{dsDNA}.tpx.summary.add_zeros.gz"
	output:
		"{ssRNA}_ssmasked-{dsDNA}.tpx.summary.add_zeros.web_version.gz"
	shell:"""
		bawk 'BEGIN{{print "ssRNA_id","dsDNA_id","dsDNA_chr","dsDNA_b","dsDNA_e","Stability_best","Stability_norm","Score_best"}} \
		NR>1{{split($1,a,":"); split(a[4],b,"-"); \
		print $2,$1,a[2],a[3],b[1],b[2],$12,$15,$14}}' {input} \
		| gzip > {output}
"""


rule RNAplfold_lunp_modif_zscore_packed:
	input:
		"RNAplfold/{ssRNA}_lunp.modif_zscore"
	output:
		"{ssRNA}_secondary_structure.msgpack"	
	shell:"""
		secondary_structure_to_msgpack.py {wildcards.ssRNA}_secondary_structure.msgpack < {input}
	"""

rule prepare_tfo_profile:
	input: "{file}.tpx.stability.gz"
	output: temp("{file}.tpx.stability.tfo_profile.pre")
	shell:"""
		zcat {input} | cut -f 2,3,14 | tail -n +2 | bsort -k3,3nr -k1,1n  -S2% > {output}
	"""

rule get_tfo_profile_range_packed:
        input:
                "{ssRNA}_ssmasked-dsDNA.tpx.stability.tfo_profile.pre"
        output:
                "{ssRNA}.profile_range.msgpack"
        shell: """	
			tfo_profile.py < {input} > {output}
        """

rule aggregated_random_tpx:
	input:
		expand("ssRNA_ssmasked-dsDNA_shuf_{run}.tpx.stability.tfo_profile.pre", run=range(1, config["randomization_num"]+1))
	output: "ssRNA.profile_range.random.msgpack"
	shell: """
		tfo_profile.py -m {input} > {output}
	"""

rule shuffle_fasta:
	input: 
		fasta = "{file}.fa"
	output:  temp("{file}_shuf_{run,\d+}.fa")
	shell:"""
		fasta-shuffle-letters {input.fasta} -kmer 1 -seed $(date +%s%N) > {output}
	"""

rule aggregated_random_tpx_fasta:
	input:
		expand("ssRNA_shuf_{run}_ssmasked-dsDNA.tpx.stability.tfo_profile.pre", run=range(1, config["randomization_num"]+1))
	output: "ssRNA.profile_range.random.msgpack"
	shell: """
		tfo_profile.py -m {input} > {output}
	"""
ruleorder: aggregated_random_tpx > aggregated_random_tpx_fasta
ruleorder: dsdna_fasta_from_bed > shuffle_fasta



##############################
# From sequences - one ssRNA #
##############################

rule run_from_sequences:
	input:
		summary=expand("{ssRNA}_ssmasked-{dsDNA}.tpx.summary.add_zeros.gz",
				ssRNA=get_sequence_name(config["from_sequences"]["ssRNA"]),
				dsDNA=get_sequence_name(config["from_sequences"]["dsDNA"])
		),
		stability=expand("{ssRNA}_ssmasked-{dsDNA}.tpx.stability.gz",
				ssRNA=get_sequence_name(config["from_sequences"]["ssRNA"]),
				dsDNA=get_sequence_name(config["from_sequences"]["dsDNA"])
		)



###########################################
# Promoter TPX Stability Test - one ssRNA #
###########################################

# Input: 
# 1) List of the universe of genes (e.g, expressed genes or ChIRP-seq identified genes)
# 2) List of genes of interest (e.g., differentially expressed genes)

# Output:
# 1) Stability comparison boxplot
# 2) Stability comparison table
# 3) fGSEA table
# 4) Enrichment plot
# 5) Leading edge list

# TODO: check if genes of interest are included in the universe of genes
rule check_gene_inclusion:
	input:
		genes_all=config["promoter_tpx_stability_test"]["genes_all"],
		genes_of_interest=config["promoter_tpx_stability_test"]["genes_of_interest"]
	output:
		"check_gene_inclusion_done"
	shell:"""

	"""

rule tss_from_gene:
	input:
		tss_ref=config["tss_ref_bed"],
		gene_list=config["promoter_tpx_stability_test"]["genes_all"]
	output:
		"genes_all.tss.bed"
	shell: """
		filter_1col 4 {input.gene_list} < {input.tss_ref} > {output} 
	"""

rule create_tblist:
	input:
		genes_all=config["promoter_tpx_stability_test"]["genes_all"],
		genes_of_interest=config["promoter_tpx_stability_test"]["genes_of_interest"]
	output:
		"tblist.tsv"
	shell:"""
		cat \
			<(bawk '{{print $1,"putative_target"}}' {input.genes_of_interest}) \
			<(filter_1col -v 1 {input.genes_of_interest} < {input.genes_all} | bawk '{{print $1,"background"}}') \
		> {output}
	"""

rule run_stability_comp:
	input:
		tpx="{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.gz",
		tblist="tblist.tsv"
	output:
		tab="results/{ssRNA}/{stability_score}/stability_comp.tsv",
		boxplot=report(
            "results/{ssRNA}/{stability_score}/stability_comp_boxplot." + config.get("promoter_tpx_stability_test", {}).get("plot_format", ""),
            caption="../../local/report/promoter_tpx_stability_test-stability_comp_boxplot.rst",
            category="promoter_tpx_stability_test",
            subcategory="stability_comp",
            labels={"ssRNA": "{ssRNA}", "stability_score": "{stability_score}"},
        )
	shell:"""
		stability_comp.r \
			-t {input.tpx} \
			-l {input.tblist} \
			-d `dirname {output.boxplot}` \
			-f {config[promoter_tpx_stability_test][plot_format]} \
			--score {wildcards.stability_score}
	"""

rule create_rnk:
	input:
		"{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.gz"
	output:
		"{ssRNA}_{stability_score}_rnk.gz"
	shell:"""
		bawk 'NR>1{{split($1,a,"::"); print a[1],${wildcards.stability_score}}}' {input} \
		| sort -k2,2n \
		| find_best 1 2 \
		| gzip > {output}
	"""

rule create_gmt:
	input:
		config["promoter_tpx_stability_test"]["genes_of_interest"]
	output:
		"genes_of_interest.gmt"
	shell:"""
		tr "\\n" "\\t" < {input} \
		| bawk '{{print "genes_of_interest",".",$0}}' > {output}
	"""

rule run_fgsea:
	input:
		rnk="{ssRNA}_{stability_score}_rnk.gz",
		gmt="genes_of_interest.gmt"
	output:
		leading_edge="results/{ssRNA}/{stability_score}/leading_edge.tsv",
		enrich_plot=report(
            "results/{ssRNA}/{stability_score}/enrichment_plot." + config.get("promoter_tpx_stability_test", {}).get("plot_format", ""),
            caption="../../local/report/promoter_tpx_stability_test-enrich_plot.rst",
            category="promoter_tpx_stability_test",
            subcategory="enrichment_test",
            labels={"ssRNA": "{ssRNA}", "stability_score": "{stability_score}"},
        ),
		fgsea="results/{ssRNA}/{stability_score}/fgseaRes.tsv"
	shell:"""
		run_fgsea.r \
			-g {input.gmt} \
			-r {input.rnk} \
			-n {config[promoter_tpx_stability_test][gsea][nperm]} \
			-b {config[promoter_tpx_stability_test][gsea][max_genes_in_set]} \
			-s {config[promoter_tpx_stability_test][gsea][min_genes_in_set]} \
			-d `dirname {output.fgsea}` \
			-o {config[promoter_tpx_stability_test][plot_format]} \
			--gseaParam {config[promoter_tpx_stability_test][gsea][gsea_weight]}
	"""

rule run_promoter_tpx_stability_test:
	input:
		enrich=expand("results/{ssRNA}/{stability_score}/fgseaRes.tsv",
				ssRNA=get_sequence_name(config["promoter_tpx_stability_test"]["ssRNA"]),
				stability_score=config["promoter_tpx_stability_test"]["score"]),
		mann_whitney=expand("results/{ssRNA}/{stability_score}/stability_comp_boxplot." + config.get("promoter_tpx_stability_test", {}).get("plot_format", ""),
				ssRNA=get_sequence_name(config["promoter_tpx_stability_test"]["ssRNA"]),
				stability_score=config["promoter_tpx_stability_test"]["score"])



###################################
# Random Regions Test - one ssRNA #
###################################

# Input:

# Output:


########################################
# Promoter Stability Test - ssRNA List #
########################################

# Input: 
# 1) list of ssRNA with associated targets and background genes (e.g., expressed genes)
# .META:
#	1) ssRNA
#	2) gene_name
#	3) class (target | background)

# Output:
# 1) matrix reduced tpx table
# 2) boxplot for each ssRNA
# 3) table of mw pval

# retrieve ssRNA names from each list
def all_selected_ssRNA_id():
	if (config["promoter_stability_test"]["tblist"] == "null"):
		return set()
	selected_ssRNA = set([line.rstrip().split("\t")[0] for line in open(config["promoter_stability_test"]["tblist"]).readlines()])
	for ssRNA in selected_ssRNA:
		yield ssRNA.replace("-","_")

# split target and background lists for each ssRNA
rule prepare_promoter_stability_ssRNA:
	input:
		tblist=config["promoter_stability_test"]["tblist"],
		trasncript_fastas=config["transcript_fastas"]
	output:
		"promoter_stability_test/{ssRNA}/{ssRNA}.fasta"
	shell: """
		ssRNA=$(echo "{wildcards.ssRNA}" | tr "_" "-");\
		mkdir -p $(dirname {output});\
		zcat {input.trasncript_fastas} | fasta2oneline | bawk -v env_var="$ssRNA" '$2==env_var{{print ">"$2"\\n"$3}}' > {output}
	"""

rule prepare_promoter_stability_ssRNA_tblist:
	input:
		config["promoter_stability_test"]["tblist"]
	output:
		"{ssRNA}_tblist.tsv"
	shell: """
		ssRNA=$(echo "{wildcards.ssRNA}" | tr "_" "-");\
		bawk -v env_var="$ssRNA" '$1==env_var{{print $2}}' {input} > {output}
	"""	

# create a bed formatted file from the promoters list
rule tss_from_gene_list:
	input:
		tss_ref=config['tss_ref_bed'],
		gene_list="{ssRNA}_tblist.tsv"
	output:
		"{ssRNA}_tblist.tss.bed"
	shell: """
		filter_1col 4 {input.gene_list} < {input.tss_ref} > {output} 
	"""

# run 3plex 
rule all_target_tpx:
	input:
		expand("promoter_stability_test/{ssRNA}/{ssRNA}_ss{single_strandedness_cutoff}-{ssRNA}_tblist.tss.tpx.summary.add_zeros.gz",#mw_boxplot.pdf
			ssRNA = all_selected_ssRNA_id(),
			single_strandedness_cutoff = config["RNAplfold"]["single_strandedness_cutoff"]
			)
	output:
		"target_genes.tss.tpx.summary.add_zeros.gz"
	shell:"""
		matrix_reduce -t 'promoter_stability_test/*/*_ss*-*_tblist.tss.tpx.summary.add_zeros.gz'	\
		| tr ";" "\\t" | cut -f5- | bawk 'NR==1 || $1!="Duplex_ID"' \
		| gzip > {output}
	"""

# to fix: check lists merge 
rule mw_boxplot:
	input:
		tpx="{path}.tpx.summary.add_zeros.gz",
		#tpx="{ssRNA}_ss{single_strandedness_cutoff}-{dsDNA}.tpx.summary.add_zeros.gz",
		tblist=config["promoter_stability_test"]["tblist"]
	output:
		"{path}.tpx.summary.add_zeros.mw_boxplot.pdf"
		#"{ssRNA}_ss{single_strandedness_cutoff}-{dsDNA}.tpx.summary.add_zeros.mw_boxplot.pdf"
	shell:"""
		mw_boxplot.r -t {input.tpx} -l {input.tblist} --score {config[promoter_stability_test][score]} > {output}
	"""

# run mw test on scores
rule run_promoter_stability_test:
	input:
		tpx="target_genes.tss.tpx.summary.add_zeros.gz",
		tblist=config["promoter_stability_test"]["tblist"]
	output:
		"mwtest_3plex.tsv"
	shell:"""
		mwtest.r -t {input.tpx} -l {input.tblist} --score {config[promoter_stability_test][score]} > {output}
	"""

#rule regulatory_regions_test_html:
#	input:
#		target=config["target_genes_tpx"],
#		background=config["background_genes_tpx"], # e.g. expressed genes
#		rmd="regulatory_region_test.Rmd"
#	output:
#	   target_backgound_stability="target_backgound_stability.tsv",
#	   html="regulatory_region_test.html"
#	shell:"""
#		bawk 'BEGIN{{print "Stability_best","Class"}} NR>1{{print $12,"target"}}' {input.target} > {output.target_backgound_stability}; \
#		bawk 'NR>1{{print $12, "background"}}' {input.background} >> {output.target_backgound_stability}; \
#		Rscript -e 'library(rmarkdown); rmarkdown::render("{input.rmd}", output_file="{output.html}", quiet=TRUE)'
#	"""



"""

.META: *.tpx.summary.add_zeros.gz
	1       Duplex_ID
	2       Sequence_ID
	3       Total(abs)
	4       Total(rel)
	5       GA(abs)
	6       GA(rel)
	7       TC(abs)
	8       TC(rel)
	9       GT(abs)
	10      GT(rel)
	11      Duplex_length
	12      Stability_best
	13      Stability_tot
	14      Score_best
	15      Stability_norm

.META: *.tpx.gz
	1       ssRNA
	2       TFO_start
	3       TFO_end
	4       Duplex_ID
	5       TTS_start
	6       TTS_end
	7       Score
	8       Error_rate
	9       Errors
	10      Motif
	11      Strand
	12      Orientation
	13      Guanine_rate

.META: *.tpx.stability.gz *.tpx.stability
	1	ssRNA
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability

.META: *.tpx.stability.best.gz
	1	Duplex_ID
	2	Stability_best

.META: *.tpx.stability.tts_genome_coords.pre
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability
	15	tpx_seq_A
	16	tpx_seq_B
	17	tpx_seq_C
	18	tpx_seq_D
	19	region_chr
	20	region_b
	21	region_e

.META: *.tpx.stability.tts_genome_coords.gz
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability
	15	tpx_seq_A
	16	tpx_seq_B
	17	tpx_seq_C
	18	tpx_seq_D
	19	region_chr
	20	region_b
	21	region_e
	22	TTS_start_genome
	23	TTS_end_genome

.META: *.tpx.stability.tts_genome_coords.bed
	1	region_chr
	2	TTS_start_genome
	3	TTS_end_genome
	4	region_name
	5	sequence_id
	6	TFO_start
	7	TFO_end
	8	Duplex_ID
	9	TTS_start
	10	TTS_end
	11	Score
	12	Error_rate
	13	Errors
	14	Motif
	15	Strand
	16	Orientation
	17	Guanine_rate
	18	Stability
	19	tpx_seq_A
	20	tpx_seq_B
	21	tpx_seq_C
	22	tpx_seq_D

"""

# All paths in the snakefile are interpreted relative to the directory snakemake is executed in. This behaviour can be overridden


configfile: "config_general.yaml"
configfile: "config.yaml"


include: "config.smk"



##########################
# 3plex: PATO + Sability #
##########################

rule pato:
	input:
		ssRNA_file="{ssRNA}_ssmasked.fa",
		dsDNA_file="{dsDNA}.fa"
	output:
		tpx = temp("{ssRNA}_ssmasked-{dsDNA}.tpx"),
		summary = temp("{ssRNA}_ssmasked-{dsDNA}.tpx.summary")
	log:
		"{ssRNA}_ssmasked-{dsDNA}.tpx.log"
	threads: 64
	shell: """
		OMP_NUM_THREADS={threads}\
		/opt/bin/pato \
				-l  {config[pato][min_length]} \
				-L  {config[pato][max_length]} \
				-e  {config[pato][error_rate]} \
				-g  {config[pato][guanine_rate]} \
				-fr {config[pato][filter_repeat]} \
				-c  {config[pato][consecutive_errors]} \
				{config[pato][other_parameters]} \
				-of 1 \
				--chunk-size {config[pato][sim_sequences]} \
				-ss {input.ssRNA_file} -ds {input.dsDNA_file} -o {output.tpx} > {log} 2> pato_e.txt
		mv {output.tpx}.out {output.tpx}
	"""

rule tpx_stability:
	input:
		"{path}.tpx"
	output:
		tpx="{path}.tpx.stability.gz",
		tmp=temp("{path}.tpx.stability.gz.tmp")
	shell: """
		tail -n +2 {input} | perl -pe '$_=">$_" if ($.-1)%6==0' | perl -ne 'chomp; print "$_\\t"' | tr ">" "\\n" | tail -n +2 > {output.tmp}
		cat {output.tmp} | tpx_thermal_stability.py | gzip > {output.tpx}
	"""

rule tpx_summary_clean:
	input:
		"{file_path}.tpx.summary"
	output:
		temp("{file_path}.tpx.summary.clean")
	shell:"""
		perl -pe 'if($.==1){{s/^#\s+//; s/ //g; s/-/_/g}}' {input} > {output}
	"""

rule duplex_length:
	input:
		"{file_path}.fa"
	output:
		"{file_path}.fa.length"
	shell:"""
		fasta2oneline < {input} \
		| perl -lane 'BEGIN{{$,="\\t"}} print $F[0],length($F[1])' > {output}
	"""

rule stability_best:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		temp("{file_path}.best.tpx.stability.gz")
	shell: """
		zcat {input} | find_best 4 14 | gzip > {output}
	"""

rule score_best:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		temp("{file_path}.tpx.score_best")
	shell: """
		bawk 'BEGIN{{print "Duplex_ID","Score_best"}} NR>1 {{print $Duplex_ID,$Score}}' {input} \
		| find_best -H 1 2 > {output}
	"""

rule stability_tot_undercount:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		temp("{file_path}.tpx.stability.tot_undercount")
	shell: """
		bawk 'NR>1 {{print $Duplex_ID,$TTS_start,$TTS_end,$Stability}}' {input} \
		| bedtools sort | bedtools merge -c 4 -o max | cut -f 1,4 \
		| bsort \
		| bawk 'BEGIN{{t=0; l=""; print "Duplex_ID","Stability_tot"}}\
			{{
				if($1!=l){{\
					if(l!=""){{print l,t}}\
					t=$2; l=$1\
				}}else{{\
					t+=$2\
				}}\
			}}
			END{{ print l,t}}' > {output}
	"""

rule summary:
	input:
		summary="{ssRNA}_ssmasked-{dsDNA}.tpx.summary.clean",
		stability_best="{ssRNA}_ssmasked-{dsDNA}.best.tpx.stability.gz",
		score_best="{ssRNA}_ssmasked-{dsDNA}.tpx.score_best",
		stability_tot_undercount = "{ssRNA}_ssmasked-{dsDNA}.tpx.stability.tot_undercount",
		duplex_length = "{dsDNA}.fa.length"
	output:
		temp("{ssRNA}_ssmasked-{dsDNA}.tpx.summary.gz")
	shell: """
		cat {input.summary} \
		| translate -a -r -v -e 0 <(bawk 'BEGIN{{print "Duplex_ID","Duplex_length"}} {{print}}' {input.duplex_length}) 1 \
		| translate -a -r -v -e 0 <(bawk 'BEGIN{{print "Duplex_ID","Stability_best"}} NR>1 {{print $Duplex_ID,$Stability}}' {input.stability_best}) 1 \
		| translate -a -r -v -e 0 {input.stability_tot_undercount} 1 \
		| translate -a -r -v -e 0 {input.score_best} 1 > {output}.tmp
		bawk 'NR==1 {{print $0,"Stability_norm"}} NR>1 {{print $0,$Stability_tot/$Duplex_length}}' {output}.tmp | gzip > {output}
		rm {output}.tmp
	"""

rule add_zeros:
	input:
		dsDNA="{dsDNA}.fa",
		summary="{ssRNA}_ssmasked-{dsDNA}.tpx.summary.gz"
	output:
		"{ssRNA}_ssmasked-{dsDNA}.tpx.summary.add_zeros.gz"
	shell:"""
		 awk 'BEGIN{{print "Duplex_ID"}} match($1,/>/){{split($1,a,">"); print a[2]}}' {input.dsDNA} \
		 | translate -a -v -e 0 <(zcat {input.summary}) 1 \
		 | bawk 'NR==1{{print}} NR>1{{$2="{wildcards.ssRNA}"; print}}' \
		 | gzip > {output} 
	"""



#############################
# 3plex: ssRNA 2D structure #
#############################

RNAplfold_WINDOW_CENTER=config["RNAplfold"]["unpaired_window"] / 2
if(config["RNAplfold"]["unpaired_window"] % 2 != 0):
	RNAplfold_WINDOW_CENTER=config["RNAplfold"]["unpaired_window"] / 2 + 0.5

rule RNAplfold_lunp:
	input:
		"{ssRNA}.fa"
	output:
		lunp="RNAplfold/{ssRNA}_lunp",
		basepairs="RNAplfold/{ssRNA}_basepairs"
	shell: """
		mkdir -p RNAplfold; 
		RNAplfold -W {config[RNAplfold][window_size]} -L {config[RNAplfold][span_size]} -u {config[RNAplfold][unpaired_window]} -o < {input}; 
		mv *_lunp {output.lunp}; mv *_basepairs {output.basepairs}
	"""

rule RNAplfold_lunp_modif_zscore:
	input:
		"RNAplfold/{ssRNA}_lunp"
	output:
		"RNAplfold/{ssRNA}_lunp.modif_zscore"
	shell:"""
		grep -v '#' {input} | awk '{{print $(NF)}}' | distMedian.py > {output}
	"""

rule mask_fasta:
	input:
		RNAplfold_prob="RNAplfold/{ssRNA}_lunp.modif_zscore",
		fasta="{ssRNA}.fa"
	output:
		"{ssRNA}_ssmasked.fa"
	shell:"""
		PERC=$(sort -n {input.RNAplfold_prob} \
		| awk '{{all[NR] = $0}} END{{print all[int(NR*{config[RNAplfold][single_strandedness_cutoff]}/100 - 0.5)]}}');
		bedtools maskfasta \
			-fi {input.fasta} \
			-fo {output} \
			-bed <(awk -v perc=$PERC 'BEGIN{{OFS="\\t"}} $1<perc {{print "{wildcards.ssRNA}",NR - 1 + {RNAplfold_WINDOW_CENTER}, NR + {RNAplfold_WINDOW_CENTER}}}' {input.RNAplfold_prob} | bedtools merge)
	"""



##################
# dsDNA Specific #
##################

rule dsdna_fasta_from_bed:
	input:
		"{dsDNA}.bed"
	output:
		"{dsDNA}.fa"
	shell: """
		bedtools getfasta -name+ -fi {config[genome_fasta]} -bed {input} -fo {wildcards.dsDNA}.fa
	"""
	
rule shuffle_bed:
	input: 
		bed = "{file}.bed",
		exclude = config["shuffle_blacklist"],
		chrom_info = config["chrom_info"]
	output:  temp("{file}_shuf_{run,\d+}.bed")
	shell:"""
		bedtools shuffle -excl {input.exclude} -i {input.bed} -g {input.chrom_info} -seed $(date +%s%N) > {output}
		#| bawk '{{$4="rand_"$4; $5="neg"; print}}' 
	"""

rule ln_dsDNA_predefined_fa:
	input:
		config['dsDNA_predefined_fa']
	output:
		"dsDNA.fa"
	shell: """
		ln -s {input} {output}
	"""
rule ln_dsDNA_predefined_bed:
	input:
		config['dsDNA_predefined_bed']
	output:
		"dsDNA.bed"
	shell: """
		ln -s {input} {output}
	"""

rule tts_genome_coords:
       input:
               tpx="{file_path_prefix}-{dsDNA}.tpx.stability.gz",
               bed="{dsDNA}.bed"
       output:
               temp("{file_path_prefix}-{dsDNA}.tpx.stability.tts_genome_coords.gz")
       shell:"""
               zcat {input.tpx} | translate -r -a -f 4 <(bawk 'BEGIN{{ print "TTS_chr", "Duplex_start","Duplex_end","Duplex_ID" }} {{print}}' {input.bed}) 4 > {output}.tmp
               bawk '	NR==1 {{print $0,"TTS_start_genome","TTS_end_genome"}}\
			NR>1  {{TTS_start_genome=$TTS_start+$Duplex_start; TTS_end_genome=$TTS_end+$Duplex_start; print $0,TTS_start_genome,TTS_end_genome}}' {output}.tmp | gzip > {output}
       """

rule tts_genome_coords_bed:
	input:
		"{file}.tts_genome_coords.gz"
	output:
		"{file}.tts_genome_coords.bed"
	shell:"""
		bawk 'NR>1 {{\
			score = int($Stability*10*({config[TTS_bed][ucsc_dark_gray]}/({config[TTS_bed][dark_gray_stability]}*10))); if(a>1000){{a = 1000}}; \
			print $TTS_chr,$TTS_start_genome,$TTS_end_genome,$Duplex_ID,score\\
		}}' {input} | \
		bedtools sort | bedtools merge -i - -c 4,5 -o distinct,max | id2count -a 4 > {output}
	"""


#######################
# Web Server Specific #
#######################

rule tpx_stability_index:
	input:
		"{path}.tpx.stability.gz"
	output:
		tpx_indexed="{path}.tpx.stability.indexed.gz",
		indexes="{path}.tpx.stability.indexed.gz.tbi"
	shell:"""
		zcat {input} | bawk '{{$1="ssRNA"; print}}' | bedtools sort |  bgzip > {output.tpx_indexed}
		tabix -p bed {output.tpx_indexed}
	"""

rule stability_ssRNA_profile:
	input:
		"{file_path}.tpx.stability.gz"
	output:
		"{file_path}.tpx.stability.profile.msgpack"
	shell: """
		zcat {input} | cut -f 2,3,14 | stability_profile.py 22743 > {output}
	"""
	#TODO: define ssRNA length

rule RNAplfold_lunp_modif_zscore_packed:
	input:
		"RNAplfold/{ssRNA}_lunp.modif_zscore"
	output:
		"{ssRNA}_secondary_structure.msgpack"	
	shell:"""
		secondary_structure_to_msgpack.py {wildcards.ssRNA}_secondary_structure.msgpack < {input}
	"""

rule prepare_tfo_profile:
	input: "{file}.tpx.stability.gz"
	output: temp("{file}.tpx.stability.tfo_profile.pre")
	shell:"""
		zcat {input} | cut -f 2,3,14 | tail -n +2 | bsort -k3,3nr -k1,1n  -S2% > {output}
	"""

rule get_tfo_profile_range_packed:
        input:
                "{ssRNA}_ssmasked-dsDNA.tpx.stability.tfo_profile.pre"
        output:
                "{ssRNA}.profile_range.msgpack"
        shell: """	
			tfo_profile.py < {input} > {output}
        """

rule aggregated_random_tpx:
	input:
		expand("ssRNA_ssmasked-dsDNA_shuf_{run}.tpx.stability.tfo_profile.pre", run=range(1, config["randomization_num"]+1))
	output: "ssRNA.profile_range.random.msgpack"
	shell: """
		tfo_profile.py -m {input} > {output}
	"""


#######################################
# Promoter Stability Test - one ssRNA #
#######################################

rule create_tblist:
	input:
		putative_target_genes=config["prom_stab_test"]["putative_target_genes"],
		background_genes=config["prom_stab_test"]["background_genes"]
	output:
		"tblist.tsv"
	shell:"""
		cat <(bawk '{{print $1,"putative_target"}}' {input.putative_target_genes}) <(bawk '{{print $1,"background"}}' {input.background_genes}) > {output}
	"""

rule tss_from_geneid:
	input:
		tss_ref=config["tss_ref_bed"], 
		tblist="tblist.tsv"
	output:
		"tblist.tss.bed"
	shell: """
		filter_1col 4 <(cut -f1 {input.tblist}) < {input.tss_ref} > {output} 
	"""

rule prom_stab_test_boxplot:
	input:
		tpx="{ssRNA}_ssmasked-tblist.tss.tpx.summary.add_zeros.gz",
		tblist="tblist.tsv"
	output:
		tab="{ssRNA}_ssmasked-tblist.tss.tpx.summary.add_zeros.prom_stab_test.tsv",
		boxplot="{ssRNA}_ssmasked-tblist.tss.tpx.summary.add_zeros.prom_stab_test_boxplot.pdf"
	shell:"""
		promoter_stability_test.r \
			-t {input.tpx} \
			-l {input.tblist} \
			--score {config[prom_stab_test][score]}
	"""



###############################
# Enrichment Test - one ssRNA #
###############################

# Input: 
# 1) List of all genes (e.g, expressed genes or ChIRP-seq identified genes)
# 2) List of genes of interest (e.g., differentially expressed genes)

# Output:
# 1) fgsea table
# 2) Enrichment plot
# 3) Leading edge list

rule create_gmt:
	input:
		config["enrichment_test"]["genes_of_interest"]
	output:
		"genes_of_interest.gmt"
	shell:"""
		tr "\\n" "\\t" < {input} \
		| bawk '{{print "genes_of_interest",".",$0}}' > {output}
	"""

rule tss_from_gene_enrich:
	input:
		tss_ref=config["tss_ref_bed"],
		gene_list=config["enrichment_test"]["genes_all"]
	output:
		"genes_all.tss.bed"
	shell: """
		filter_1col 4 {input.gene_list} < {input.tss_ref} > {output} 
	"""

rule create_rnk:
	input:
		"{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.gz"
	output:
		"{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.rnk.gz"
	shell:"""
		bawk 'NR>1{{split($1,a,"::"); print a[1],$15}}' {input} \
		| sort -k2,2n \
		| find_best 1 2 \
		| gzip > {output}
	"""

rule run_fgsea:
	input:
		rnk="{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.rnk.gz",
		gmt="genes_of_interest.gmt"
	output:
		leading_edge="{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.rnk.leading_edge.tsv",
		enrich_plot="{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.rnk.enrichment_plot.pdf",
		fgsea="{ssRNA}_ssmasked-genes_all.tss.tpx.summary.add_zeros.rnk.fgseaRes.tsv"
	shell:"""
		Rscript run_fgsea.r \
			-g {input.gmt} \
			-r {input.rnk} \
			-n 1000 \
			-b {config[enrichment_test][gsea][max_genes_in_set]} \
			-s {config[enrichment_test][gsea][min_genes_in_set]} \
			-d `dirname {output.fgsea}` \
			--gseaParam {config[enrichment_test][gsea][gsea_weight]}
	"""



########################################
# Promoter Stability Test - ssRNA List #
########################################

# Input: 
# 1) list of ssRNA with associated targets and background genes (e.g. expressed genes)
# .META:
#	1) ssRNA
#	2) gene_name
#	3) class (target | background)

# Output:
# 1) matrix reduced tpx table
# 2) boxplot for each ssRNA
# 3) table of mw pval

# retrieve ssRNA names from each list
def all_selected_ssRNA_id():
	if (config["promoter_stability_test"]["tblist"] == "null"):
		return set()
	selected_ssRNA = set([line.rstrip().split("\t")[0] for line in open(config["promoter_stability_test"]["tblist"]).readlines()])
	for ssRNA in selected_ssRNA:
		yield ssRNA.replace("-","_")

# split target and background lists for each ssRNA
rule prepare_promoter_stability_ssRNA:
	input:
		tblist=config["promoter_stability_test"]["tblist"],
		trasncript_fastas=config["transcript_fastas"]
	output:
		"promoter_stability_test/{ssRNA}/{ssRNA}.fasta"
	shell: """
		ssRNA=$(echo "{wildcards.ssRNA}" | tr "_" "-");\
		mkdir -p $(dirname {output});\
		zcat {input.trasncript_fastas} | fasta2oneline | bawk -v env_var="$ssRNA" '$2==env_var{{print ">"$2"\\n"$3}}' > {output}
	"""

rule prepare_promoter_stability_ssRNA_tblist:
	input:
		config["promoter_stability_test"]["tblist"]
	output:
		"{ssRNA}_tblist.tsv"
	shell: """
		ssRNA=$(echo "{wildcards.ssRNA}" | tr "_" "-");\
		bawk -v env_var="$ssRNA" '$1==env_var{{print $2}}' {input} > {output}
	"""	

# create a bed formatted file from the promoters list
rule tss_from_gene:
	input:
		tss_ref=config['tss_ref_bed'], #/home/reference_data/bioinfotree/task/gencode/dataset/hsapiens/42/MANE.GRCh38.v1.1.refseq_genomic.Symbol.tss.1500_500.bed
		gene_list="{ssRNA}_tblist.tsv"
	output:
		"{ssRNA}_tblist.tss.bed"
	shell: """
		filter_1col 4 {input.gene_list} < {input.tss_ref} > {output} 
	"""

# run 3plex 
rule all_target_tpx:
	input:
		expand("promoter_stability_test/{ssRNA}/{ssRNA}_ss{single_strandedness_cutoff}-{ssRNA}_tblist.tss.tpx.summary.add_zeros.gz",#mw_boxplot.pdf
			ssRNA = all_selected_ssRNA_id(),
			single_strandedness_cutoff = config["RNAplfold"]["single_strandedness_cutoff"]
			)
	output:
		"target_genes.tss.tpx.summary.add_zeros.gz"
	shell:"""
		matrix_reduce -t 'promoter_stability_test/*/*_ss*-*_tblist.tss.tpx.summary.add_zeros.gz'	\
		| tr ";" "\\t" | cut -f5- | bawk 'NR==1 || $1!="Duplex_ID"' \
		| gzip > {output}
	"""

# to fix: check lists merge 
rule mw_boxplot:
	input:
		tpx="{path}.tpx.summary.add_zeros.gz",
		#tpx="{ssRNA}_ss{single_strandedness_cutoff}-{dsDNA}.tpx.summary.add_zeros.gz",
		tblist=config["promoter_stability_test"]["tblist"]
	output:
		"{path}.tpx.summary.add_zeros.mw_boxplot.pdf"
		#"{ssRNA}_ss{single_strandedness_cutoff}-{dsDNA}.tpx.summary.add_zeros.mw_boxplot.pdf"
	shell:"""
		mw_boxplot.r -t {input.tpx} -l {input.tblist} --score {config[promoter_stability_test][score]} > {output}
	"""

# run mw test on scores
rule run_promoter_stability_test:
	input:
		tpx="target_genes.tss.tpx.summary.add_zeros.gz",
		tblist=config["promoter_stability_test"]["tblist"]
	output:
		"mwtest_3plex.tsv"
	shell:"""
		mwtest.r -t {input.tpx} -l {input.tblist} --score {config[promoter_stability_test][score]} > {output}
	"""

#rule regulatory_regions_test_html:
#	input:
#		target=config["target_genes_tpx"],
#		background=config["background_genes_tpx"], # e.g. expressed genes
#		rmd="regulatory_region_test.Rmd"
#	output:
#	   target_backgound_stability="target_backgound_stability.tsv",
#	   html="regulatory_region_test.html"
#	shell:"""
#		bawk 'BEGIN{{print "Stability_best","Class"}} NR>1{{print $12,"target"}}' {input.target} > {output.target_backgound_stability}; \
#		bawk 'NR>1{{print $12, "background"}}' {input.background} >> {output.target_backgound_stability}; \
#		Rscript -e 'library(rmarkdown); rmarkdown::render("{input.rmd}", output_file="{output.html}", quiet=TRUE)'
#	"""



##################
# other

rule shuffle_fasta:
	input: 
		fasta = "{file}.fa"
	output:  temp("{file}_shuf_{run,\d+}.fa")
	shell:"""
		fasta-shuffle-letters {input.fasta} -kmer 1 -seed $(date +%s%N) > {output}
	"""

rule aggregated_random_tpx_fasta:
	input:
		expand("ssRNA_shuf_{run}_ssmasked-dsDNA.tpx.stability.tfo_profile.pre", run=range(1, config["randomization_num"]+1))
	output: "ssRNA.profile_range.random.msgpack"
	shell: """
		tfo_profile.py -m {input} > {output}
	"""
ruleorder: aggregated_random_tpx > aggregated_random_tpx_fasta
ruleorder: dsdna_fasta_from_bed > shuffle_fasta


"""

.META: *.tpx.gz
	1       ssRNA
	2       TFO_start
	3       TFO_end
	4       Duplex_ID
	5       TTS_start
	6       TTS_end
	7       Score
	8       Error_rate
	9       Errors
	10      Motif
	11      Strand
	12      Orientation
	13      Guanine_rate

.META: *.tpx.stability.gz *.tpx.stability
	1	ssRNA
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability

.META: *.tpx.stability.best.gz
	1	Duplex_ID
	2	Stability_best

.META: *.tpx.tts_genom_coords.assoc_genes
	1	ssRNA
	2	cCRE
	2	genehancer_region
	3	gene
	4	EntrezGene
	4	tpx_score	

.META: *.tpx.stability.tts_genome_coords.pre
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability
	15	tpx_seq_A
	16	tpx_seq_B
	17	tpx_seq_C
	18	tpx_seq_D
	19	region_chr
	20	region_b
	21	region_e

.META: *.tpx.stability.tts_genome_coords.gz
	1	sequence_id
	2	TFO_start
	3	TFO_end
	4	Duplex_ID
	5	TTS_start
	6	TTS_end
	7	Score
	8	Error_rate
	9	Errors
	10	Motif
	11	Strand
	12	Orientation
	13	Guanine_rate
	14	Stability
	15	tpx_seq_A
	16	tpx_seq_B
	17	tpx_seq_C
	18	tpx_seq_D
	19	region_chr
	20	region_b
	21	region_e
	22	TTS_start_genome
	23	TTS_end_genome

.META: *.tpx.stability.tts_genome_coords.bed
	1	region_chr
	2	TTS_start_genome
	3	TTS_end_genome
	4	region_name
	5	sequence_id
	6	TFO_start
	7	TFO_end
	8	Duplex_ID
	9	TTS_start
	10	TTS_end
	11	Score
	12	Error_rate
	13	Errors
	14	Motif
	15	Strand
	16	Orientation
	17	Guanine_rate
	18	Stability
	19	tpx_seq_A
	20	tpx_seq_B
	21	tpx_seq_C
	22	tpx_seq_D

"""
